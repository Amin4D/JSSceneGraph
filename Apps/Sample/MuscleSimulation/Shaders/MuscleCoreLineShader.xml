<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>MuscleCoreLineShader</name>
  
  <uniforms>
    <uniform name="u_materialColor" constant="diffuseColor" type="Color" defaultValue="FABRIC.RT.rgba(0.8,0,0,1)"/>
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_corePositions" constant="corePositions" type="Mat44[]" owner="muscle" />
  </uniforms>
  
  <attributes>
    <attribute name="a_position" binding="positions"/>
  </attributes>
  
  
  <preprocessordirectives>
    <preprocessordirective name="NUM_MUSCLES" binding="numMuscles"/>
  </preprocessordirectives>
  
  <vertexshader>
    <source>
      <![CDATA[
      uniform mat4 u_modelViewProjectionMatrix;
      attribute vec4 a_position;
      
      uniform  mat4 u_corePositions[NUM_MUSCLES];
      
      vec3 EvalBSpline( vec3 p1, vec3 p2, vec3 p3, vec3 p4, float t ){
        vec3 a0, a1, a2, a3;
      
        a0 = ( -p1 + (p2 * 3.0) - (p3 * 3.0) + p4)/6.0;
        a1 = ((p1 * 3.0) - (p2 * 6.0) + (p3 * 3.0))/6.0;
        a2 = ((p1 * -3.0) + (p3 * 3.0))/6.0;
        a3 = ( p1 + (p2 * 4.0) + p3 )/6.0;
      
        return a3 + ((a2 + ((a1 + (a0 * t)) * t)) * t);
      }
      
      vec3 EvalPiecewiseBSpline( vec3 controlPoints[4], int numControlPoints, float u ){
        vec3 p;
        int i;
        float t = u * float(numControlPoints - 1);
        if( t < float(numControlPoints - 1) ){
          i = int(floor( t ));
          t = t - float(i);
        }
        else{
          i = numControlPoints - 2;
          t = 1.0;
        }
        if( i == 0 ){
          p = controlPoints[ i ] + (controlPoints[ i ] - controlPoints[ i + 1 ]);
          return EvalBSpline( p, controlPoints[ i ], controlPoints[ i + 1 ], controlPoints[ i + 2 ], t );
        }
        else if( i == ( numControlPoints - 2 ) ){
          p = controlPoints[ i + 1 ] + (controlPoints[ i + 1 ] - controlPoints[ i ]);
          return EvalBSpline( controlPoints[ i - 1 ], controlPoints[ i ], controlPoints[ i + 1 ], p, t );
        }
        else{
          return EvalBSpline( controlPoints[ i - 1 ], controlPoints[ i ], controlPoints[ i + 1 ], controlPoints[ i + 2 ], t );
        }
      }
      
      void main(){
      
        vec3 controlPoints[4];
        controlPoints[0] = u_corePositions[0][0].xyz;
        controlPoints[1] = u_corePositions[0][1].xyz;
        controlPoints[2] = u_corePositions[0][2].xyz;
        controlPoints[3] = u_corePositions[0][3].xyz;
        vec3 pos = EvalPiecewiseBSpline( controlPoints, 4, a_position.x );
        
        gl_Position = u_modelViewProjectionMatrix * vec4( pos.x, pos.y, pos.z, 1.0);
        
      }
      ]]>
    </source>
  </vertexshader>
  
  <fragmentshader>
    <source>
      <![CDATA[
      uniform vec4 u_materialColor;
      
      void main(){
        gl_FragColor = u_materialColor;
      }

      ]]>
    </source>
  </fragmentshader>
</shader>
