<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>MuscleVolumeShader</name>
  
  <prototypeMaterialType>TransparentMaterial</prototypeMaterialType>
  
  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    <uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
    <uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
    <uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
    <uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
    
    <uniform name="u_materialAmbientColor" constant="ambientColor" type="Color" defaultValue="FABRIC.RT.rgba(0.0,0.0,0.0,1)"/>
    <uniform name="u_materialDiffuseColor" constant="diffuseColor" type="Color" defaultValue="FABRIC.RT.rgba(0.8,0,0,1)"/>
    <uniform name="u_materialSpecularColor" constant="specularColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,0.5,1)"/>
    <uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>
    
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_viewMatrix" constant="viewMatrix" type="Mat44" owner="instance"/>
    
    <uniform name="u_corePositions" constant="corePositions" type="Mat44[]" owner="muscle" />
    <uniform name="u_coreFrames" constant="coreFrames" type="Mat44[]" owner="muscle" />
  </uniforms>
  
  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
    <attribute name="a_texCoord" binding="uvs0"/>
  </attributes>
  
  <lights>
    <light type="Light" binding="light"/>
  </lights>
  
  <openglstateparams>
    <enableOptions>
      <option>GL_BLEND</option>
    </enableOptions>
    <blendModeSfactor>GL_SRC_ALPHA</blendModeSfactor>
    <blendModeDfactor>GL_ONE_MINUS_SRC_ALPHA</blendModeDfactor>
  </openglstateparams>
  
  <preprocessordirectives>
    <preprocessordirective name="NUM_MUSCLES" binding="numMuscles"/>
  </preprocessordirectives>
  
  <vertexshader>
    <source>
      <![CDATA[
      uniform mat4 u_modelViewProjectionMatrix;
      uniform mat4 u_viewMatrix;
      uniform vec4 u_lightPosition;
      
      attribute vec4 a_position;
      attribute vec3 a_normal;
      attribute vec2 a_texCoord;
      
      uniform  mat4 u_corePositions[NUM_MUSCLES];
      uniform  mat4 u_coreFrames[NUM_MUSCLES];
      
      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;

      vec3 evalBSpline( vec3 p1, vec3 p2, vec3 p3, vec3 p4, float t ){
        vec3 a0, a1, a2, a3;
      
        a0 = ( -p1 + (p2 * 3.0) - (p3 * 3.0) + p4)/6.0;
        a1 = ((p1 * 3.0) - (p2 * 6.0) + (p3 * 3.0))/6.0;
        a2 = ((p1 * -3.0) + (p3 * 3.0))/6.0;
        a3 = ( p1 + (p2 * 4.0) + p3 )/6.0;
      
        return a3 + ((a2 + ((a1 + (a0 * t)) * t)) * t);
      }
      
      vec3 evalPiecewiseBSpline( vec3 controlPoints[4], int numControlPoints, float u, out int i, out float t ){
        vec3 p;
        t = u * float(numControlPoints - 1);
        if( t < float(numControlPoints - 1) ){
          i = int(floor( t ));
          t = t - float(i);
        }
        else{
          i = numControlPoints - 2;
          t = 1.0;
        }
        if( i == 0 ){
          p = controlPoints[ i ] + (controlPoints[ i ] - controlPoints[ i + 1 ]);
          return EvalBSpline( p, controlPoints[ i ], controlPoints[ i + 1 ], controlPoints[ i + 2 ], t );
        }
        else if( i == ( numControlPoints - 2 ) ){
          p = controlPoints[ i + 1 ] + (controlPoints[ i + 1 ] - controlPoints[ i ]);
          return EvalBSpline( controlPoints[ i - 1 ], controlPoints[ i ], controlPoints[ i + 1 ], p, t );
        }
        else{
          return EvalBSpline( controlPoints[ i - 1 ], controlPoints[ i ], controlPoints[ i + 1 ], controlPoints[ i + 2 ], t );
        }
      }
      
      vec3 vectorScale(in vec3 v, in float s) {
        return vec3(v.x*s, v.y*s, v.z*s);
      }
      
      
      vec4 quaternionConjugate(in vec4 q) {
      //  return vec4(-q.x, -q.y, -q.z, q.w);
        return vec4(q.xyz, -q.w);
      }
      
      vec4 quaternionCross (in vec4 q, in vec4 gq) {
        vec3 v = vectorScale(gq.xyz, q.w) + vectorScale(q.xyz, gq.w) + cross(q.xyz, gq.xyz);
        return vec4(v, q.w * gq.w - dot(q.xyz, gq.xyz));
      }
  
      vec4 quaternionMultiply (in vec4 a, in vec4 b) {
        vec3 bvaw = vectorScale(b.xyz, a.w);
        vec3 avbw = vectorScale(a.xyz, b.w);
        vec3 v = cross(a.xyz, b.xyz) - bvaw - avbw;
        return vec4(v.x, v.y, v.z, a.w * b.w - dot(a.xyz, b.xyz));
      }

      vec3 rotateVector1(in vec4 q, in vec3 v) {
        vec4 vq = vec4(v.xyz, 0.0);
      //  vec4 pq = quaternionMultiply(q, quaternionMultiply(vq, quaternionConjugate(q)));
        vec4 pq = quaternionMultiply(quaternionMultiply(q, vq), quaternionConjugate(q));
        return pq.xyz;
      }
      
      vec3 rotateVector2(in vec4 q, in vec3 v) {
        vec4 temp = quaternionCross( q, vec4(v, 0.0));
        temp = quaternionMultiply(temp, quaternionConjugate(q));
        return temp.xyz;
      }
      
      void main(){
        const int instanceID = 0;
      
        vec3 corePositions[4];
        corePositions[0] = u_corePositions[instanceID][0].xyz;
        corePositions[1] = u_corePositions[instanceID][1].xyz;
        corePositions[2] = u_corePositions[instanceID][2].xyz;
        corePositions[3] = u_corePositions[instanceID][3].xyz;
        
        float coreInflationValues[4];
        coreInflationValues[0] = u_corePositions[instanceID][0].w;
        coreInflationValues[1] = u_corePositions[instanceID][1].w;
        coreInflationValues[2] = u_corePositions[instanceID][2].w;
        coreInflationValues[3] = u_corePositions[instanceID][3].w;
        
        vec4 coreFrames[4];
        coreFrames[0] = u_coreFrames[instanceID][0];
        coreFrames[1] = u_coreFrames[instanceID][1];
        coreFrames[2] = u_coreFrames[instanceID][2];
        coreFrames[3] = u_coreFrames[instanceID][3];
        
        int i;
        float t;
        vec3 corepos = evalPiecewiseBSpline( corePositions, 4, a_position.x, i, t );
        
        float inflation = mix(coreInflationValues[i], coreInflationValues[i+1], t );
        
        vec3 frameoffsetvec = vectorScale(a_position.xyz, inflation);
        frameoffsetvec.x = 0.0;
        vec4 frame = normalize( mix(coreFrames[i], coreFrames[i+1], t ));
        vec3 pos = corepos + rotateVector2( frame, frameoffsetvec );
        
        gl_Position = u_modelViewProjectionMatrix * vec4( pos.x, pos.y, pos.z, 1.0);
        gl_TexCoord[0].xy = a_texCoord;
        
        normal = rotateVector2( frame, a_normal );
        vec4 modelCameraPosition = u_viewMatrix * a_position;
  
        lightDir = vec3(u_lightPosition - modelCameraPosition);
        viewDir = vec3(-modelCameraPosition);
        normal = a_normal;
        
      //  gl_Position = u_modelViewProjectionMatrix * a_position;
      }
      ]]>
    </source>
  </vertexshader>
  

  <fragmentshader>
    <source>
      <![CDATA[
      uniform int u_lightType;
      uniform vec3 u_lightDir;
      uniform vec4 u_lightColor;
      uniform float u_lightCosCutoff;

      uniform float u_materialShininess;
      uniform vec4 u_materialAmbientColor;
      uniform vec4 u_materialDiffuseColor;
      uniform vec4 u_materialSpecularColor;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
    
      
      ]]>
      </source>
      <include file="FABRIC_ROOT/SceneGraph/Shaders/lighting.txt"/>
      <source>
      <![CDATA[
      
      
      void main(){
        vec3 Ln = normalize(lightDir);
        vec3 Vn = normalize(viewDir);
        vec3 Nn = normalize(normal);
        
        float lightFactor = 1.0;
        gl_FragColor = phong_shading(  Nn, 
                        Ln, 
                        Vn, 
                        u_lightType,
                        u_lightDir,
                        lightFactor,
                        u_lightCosCutoff,
                        u_lightColor,
                        u_materialDiffuseColor, 
                        u_materialSpecularColor,
                        u_materialShininess,
                        u_materialAmbientColor );
        
        // Ensure we keep the diffuce color alpha value
        gl_FragColor.a = u_materialDiffuseColor.a;
                        

      }

      ]]>
    </source>
  </fragmentshader>
</shader>
