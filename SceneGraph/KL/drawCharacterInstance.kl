//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Mat44;
use Xfo;
use OGLBuffer;
use OGLShaderProgram;
use FabricOGL;

operator drawCharacterInstance(
  io OGLShaderProgram shaderProgram,
  io Xfo pose[],
  io Mat44 invMatrices[],
  io Integer boneMapping[],
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io OGLBuffer indicesBuffer,
  io Boolean drawToggle
) {
  if(!drawToggle)
    return;

//  report("drawCharacterInstance");
  Data NULL;
  Integer location = shaderProgram.getUniformLocation(SKINNING_MATRICIES_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 skinningMatrices[];
    skinningMatrices.resize(invMatrices.size());
    for (var Integer i = 0; i < invMatrices.size(); i++) {
      if(boneMapping[i] < 0)
        continue;
      skinningMatrices[i] = invMatrices[i] * Mat44(pose[boneMapping[i]]);
    }
    shaderProgram.loadMat44UniformArray(location, skinningMatrices);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_TRIANGLES, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  }
  else{
    //report("ERROR: Character Material must use bone matrices.");
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_TRIANGLES, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  }
}
