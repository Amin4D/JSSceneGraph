//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec2, KEYFRAMETYPE;

function KEYFRAME_EVALUATEDTYPE evaluateKeyframeAnimationTrack(
  io KEYFRAMETYPE track[],
  io Scalar time,
  io Integer keyIndex
) {
  var Integer numKeys = track.size;
  if (time >= track[numKeys - 1].time) {
    return track[numKeys - 1].value;
  }
  else if (time <= track[0].time) {
    return track[0].value;
  }
  else {
    if (track[keyIndex].time <= time && time <= track[keyIndex + 1].time) {
      // we are still on the same segment as the previous evaluation.
    }
    else if (track[keyIndex + 1].time < time && time < track[keyIndex + 2].time) {
      keyIndex++;
    }
    else {
      for (var Integer i = 0; i < numKeys - 1; i++) {
        if (track[i].time <= time && time <= track[i + 1].time) {
          keyIndex = i;
          break;
        }
      }
    }
    return track[keyIndex].interpolate(track[keyIndex + 1], time);
  }
}

operator evaluateKeyframeAnimationTracks(
  io KEYFRAMETYPE tracks[][],
  io Scalar time,
  Size index,
  io KEYFRAME_EVALUATEDTYPE value,
  io Integer keyIndex
) {
  value = evaluateKeyframeAnimationTrack(tracks[index], time, keyIndex);
}

operator evaluateCurve(
  io KEYFRAMETYPE tracks[][],
  io Integer trackIndex,
  io Vec2 timeRange,
  Size index,
  Size count,
  io Scalar time,
  io KEYFRAME_EVALUATEDTYPE value,
  io Integer keyIndex
) {
  time = ((Scalar(index) / Scalar(count)) * (timeRange.y - timeRange.x)) + timeRange.x;
  value = evaluateKeyframeAnimationTrack(tracks[trackIndex], time, keyIndex);
}