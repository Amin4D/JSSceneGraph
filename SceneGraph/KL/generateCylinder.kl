//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec3;

operator setCylinderVertexCount(
  io Boolean caps,
  io Integer detail,
  io Size newCount
) {
  Integer nbSides = (detail >= 0) ? (detail + 3) : 3;

  Integer numVertices = nbSides * 2;
  Integer nbTri = nbSides * 2;

  if (caps) {
    numVertices += nbSides * 2 + 2;
    nbTri += nbSides * 2;
  }

  newCount = numVertices;
}

operator generateCylinder(
  io Scalar radius,
  io Scalar height,
  io Boolean caps,
  io Integer detail,

  io Integer indices[],
  io Vec3 positions[],
  io Vec3 normals[],
) {
  //  report( "Generate cylinder. Radius: " + radius + " Height: " + height + " Caps: " + caps + " Detail: " + detail );
  Scalar PI = 3.141592653589793238462643;

  Integer nbSides = (detail >= 0) ? (detail + 3) : 3;

  Integer numVertices = nbSides * 2;
  Integer nbTri = nbSides * 2;

  if (caps) {
    numVertices += nbSides * 2 + 2;
    nbTri += nbSides * 2;
  }

  //  positions.resize( numVertices );
  //  normals.resize( numVertices );
  indices.resize(nbTri * 3);

  for (var Integer i = 0; i < nbSides; i++) {
    var Scalar theta = (i / Scalar(nbSides)) * 2.0 * PI;

    var Vec3 nrm(cos(theta), 0.0, sin(theta));

    normals[i * 2 + 0] = normals[i * 2 + 1] = nrm;
    positions[i * 2 + 0] = Vec3(nrm.x * radius, - height / 2.0, nrm.z * radius);
    positions[i * 2 + 1] = Vec3(nrm.x * radius, height / 2.0, nrm.z * radius);

    var Integer j = (i + 1) % nbSides;
    indices[i * 6 + 0] = i * 2 + 0;
    indices[i * 6 + 1] = i * 2 + 1;
    indices[i * 6 + 2] = j * 2 + 0;

    indices[i * 6 + 3] = i * 2 + 1;
    indices[i * 6 + 4] = j * 2 + 1;
    indices[i * 6 + 5] = j * 2 + 0;
  }

  if (caps) {
    var Integer voff = nbSides * 2;
    var Integer idxoff = nbSides * 6;

    // Top cap
    var Vec3 nrm(0.0, 1.0, 0.0);

    positions[voff] = Vec3(0.0, height / 2.0, 0.0);
    normals[voff] = nrm;
    for (var Integer i = 0; i < nbSides; i++) {
      var Scalar theta = (i / Scalar(nbSides)) * 2.0 * PI;

      positions[voff + i + 1].set(cos(theta) * radius, height / 2.0, sin(theta) * radius);
      normals[voff + i + 1] = nrm;

      var Integer j = (i + 1) % nbSides;
      indices[idxoff + i * 3 + 0] = voff;
      indices[idxoff + i * 3 + 1] = voff + j + 1;
      indices[idxoff + i * 3 + 2] = voff + i + 1;
    }

    voff += nbSides + 1;
    idxoff += nbSides * 3;

    // Bottom cap
    nrm.set(0.0, - 1.0, 0.0);

    positions[voff] = Vec3(0.0, - height / 2.0, 0.0);
    normals[voff] = nrm;
    for (var Integer i = 0; i < nbSides; i++) {
      var Scalar theta = (i / Scalar(nbSides)) * 2.0 * PI;

      positions[voff + i + 1].set(cos(theta) * radius, - height / 2.0, sin(theta) * radius);
      normals[voff + i + 1] = nrm;

      var Integer j = (i + 1) % nbSides;
      indices[idxoff + i * 3 + 0] = voff;
      indices[idxoff + i * 3 + 1] = voff + i + 1;
      indices[idxoff + i * 3 + 2] = voff + j + 1;
    }
  }
}