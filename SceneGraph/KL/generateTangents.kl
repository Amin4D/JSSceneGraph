//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

// Algorithm copied from http://www.terathon.com/code/tangent.html

use Vec2, Vec3, Vec4;

operator computeTriangleTangents(
  io Integer indices[],
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Vec2 uvCoords<>,
  io Vec4 tangents<>
) {
  if (uvCoords.size() != positions.size()) {
    report('Error: uvCoords.size() !== positions.size()');
    return;
  }

  var Size iSize = indices.size();
  var Size vSize = positions.size();

  var Vec3 tanS[], tanT[];

  tanS.resize(vSize);
  tanT.resize(vSize);

  for (var Size i = 0; i < vSize; i++) {
    tanS[i].setNull();
    tanT[i].setNull();
  }

  for (var Size i = 0; i < iSize; i += 3) {
    var Integer i0 = indices[i + 0], i1 = indices[i + 1], i2 = indices[i + 2];
    var Vec3 p0 = positions[i0];
    var Vec3 p1 = positions[i1];
    var Vec3 p2 = positions[i2];

    var Vec2 t0 = uvCoords[i0];
    var Vec2 t1 = uvCoords[i1];
    var Vec2 t2 = uvCoords[i2];

    var Vec3 pe10 = p1 - p0, pe20 = p2 - p0;
    var Vec2 te10 = t1 - t0, te20 = t2 - t0;

    var Scalar r = 1.0 / te10.cross(te20);

    var Vec3 sdir((te20.y * pe10.x - te10.y * pe20.x) * r, (te20.y * pe10.y - te10.y * pe20.y) * r, (te20.y * pe10.z - te10.y * pe20.z) * r);
    tanS[i0] += sdir;
    tanS[i1] += sdir;
    tanS[i2] += sdir;

    var Vec3 tdir((te10.x * pe20.x - te20.x * pe10.x) * r, (te10.x * pe20.y - te20.x * pe10.y) * r, (te10.x * pe20.z - te20.x * pe10.z) * r);
    tanT[i0] += tdir;
    tanT[i1] += tdir;
    tanT[i2] += tdir;
  }

  for (var Size i = 0; i < vSize; i++) {
    var Vec3 n = normals[i];
    var Vec3 t = tanS[i];
    var Vec3 tangent;
    var Boolean handedness;

    tangent = (t - n * n.dot(t));
    tangent.setUnit();
    handedness = (tanT[i].dot(n.cross(t)) < 0.0);

    tangents[i].set(tangent.x, tangent.y, tangent.z, (handedness ? - 1.0 : 1.0));
  }
}