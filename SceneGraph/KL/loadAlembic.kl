//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec3;
use Xfo;
use FabricALEMBIC;

operator alembicLoad(
  io String url,
  io FabricResource resource,
  io Integer archiveID
) {
  if(resource.dataSize > 0)
    FabricALEMBICDecode(resource.data, resource.dataSize, archiveID);
}

operator alembicGetIdentifiers(
  io Integer archiveID,
  io String identifiers[]
) {
  FabricALEMBICGetIdentifiers(archiveID,identifiers);
}

operator alembicParseXform(
  io Integer archiveID,
  io String identifier,
  io Integer sample,
  io Xfo transform
) {
  FabricALEMBICParseXform(archiveID,identifier,sample,transform);
}

operator alembicParsePolyMeshCount(
  io Integer archiveID,
  io String identifier,
  io Size count
) {
  FabricALEMBICParsePolyMeshCount(archiveID,identifier,count);
}

operator alembicParsePolyMeshUniforms(
  io Integer archiveID,
  io String identifier,
  io Integer indices[]
) {
  if(indices.size() == 0)
    FabricALEMBICParsePolyMeshUniforms(archiveID,identifier,indices);
}

operator alembicParsePolyMeshAttributes(
  io Integer archiveID,
  io String identifier,
  io Integer sample,
  io Vec3 vertices[],
  io Vec3 normals[]
) {
  if(vertices.size() > 0)
    FabricALEMBICParsePolyMeshAttributes(archiveID,identifier,sample,vertices,normals);
}
