//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricPNG;
use FabricTGA;
use OGLTextureCube;
use FabricOGL;

function decodeLDRImageData(
  io FabricResource resource,
  io Size imageWidth,
  io Size imageHeight,
  io RGBA imageLDR[]
) {
  if(resource.dataSize == 0)
    return;
  String ext = resource.extension ? resource.extension : resource.mimeType;
  switch (ext) {
    case'png':
    case'image/png':
      FabricPNGDecode(resource.data, resource.dataSize, imageWidth, imageHeight, imageLDR);
      break;
    case'tga':
    case'image/tga':
      FabricTGADecode(resource.data, resource.dataSize, imageWidth, imageHeight, imageLDR);
      break;
  }
}

operator bindCubeMap(
  io FabricResource resource0,
  io FabricResource resource1,
  io FabricResource resource2,
  io FabricResource resource3,
  io FabricResource resource4,
  io FabricResource resource5,
  io OGLTextureCube cubeMap,
  io Integer textureUnit
){
  if(cubeMap.bufferID == 0){
    Size width, height;
    RGBA imageLDR[];
    var Data NULL;
    if(resource0.dataSize != 0 && !cubeMap.isFaceDataStored(0)){
      decodeLDRImageData(resource0, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 0);
    }
    if(resource1.dataSize != 0 && !cubeMap.isFaceDataStored(1)){
      decodeLDRImageData(resource1, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 1);
    }
    if(resource2.dataSize != 0 && !cubeMap.isFaceDataStored(2)){
      decodeLDRImageData(resource2, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 2);
    }
    if(resource3.dataSize != 0 && !cubeMap.isFaceDataStored(3)){
      decodeLDRImageData(resource3, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 3);
    }
    if(resource4.dataSize != 0 && !cubeMap.isFaceDataStored(4)){
      decodeLDRImageData(resource4, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 4);
    }
    if(resource5.dataSize != 0 && !cubeMap.isFaceDataStored(5)){
      decodeLDRImageData(resource5, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 5);
    }
    cubeMap.configure(textureUnit);
    cubeMap.bind(textureUnit);
  }
  else{
    cubeMap.bind(textureUnit);
  }
}


