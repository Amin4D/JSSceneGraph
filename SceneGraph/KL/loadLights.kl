
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator loadLight(
  io OGLShaderProgram shaderProgram,
  io Integer type,
  io Color color,
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
//  report("loadLight");
  Integer location;

  location = shaderProgram.getUniformLocation(LIGHTTYPE_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadIntegerUniform(location, type);
  }
  location = shaderProgram.getUniformLocation(LIGHTCOLOR_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadColorUniform(location, color);
  }
  location = shaderProgram.getUniformLocation(LIGHTPOS_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec4 viewPos = lightMatrix.row3 * cameraMatrix;
    shaderProgram.loadVec4Uniform(location, viewPos);
  }
}

operator loadDirectionalLight(
  io OGLShaderProgram shaderProgram,
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
//  report("loadDirectionalLight");
  Integer location = shaderProgram.getUniformLocation(LIGHTDIR_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec3 viewDir = Vec3(0.0, 0.0, -1.0) * lightMatrix.upperLeft() * cameraMatrix.upperLeft();
    viewDir = viewDir.unit(); //lightMatrix might have scaling
    shaderProgram.loadVec3Uniform(location, viewDir);
  }
}

operator loadSpotLight(
  io OGLShaderProgram shaderProgram,
  io Scalar coneAngle,
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
//  report("loadSpotLight");
  Integer location;

  location = shaderProgram.getUniformLocation(LIGHTDIR_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec3 viewDir = Vec3(0.0, 0.0, -1.0) * lightMatrix.upperLeft() * cameraMatrix.upperLeft();
    viewDir = viewDir.unit(); //lightMatrix might have scaling
    shaderProgram.loadVec3Uniform(location, viewDir);
  }
  location = shaderProgram.getUniformLocation(LIGHTCOSCUTOFF_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadScalarUniform(location, cos(coneAngle * 0.5));
  }
}

operator loadLightMatrixUniform(
  io OGLShaderProgram shaderProgram,
  io Mat44 lightShadowMapMatrix,
  io Mat44 cameraMatrix
) {
//  report("loadLightMatrixUniform");
  Integer location = shaderProgram.getUniformLocation(LIGHTVIEWMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 lightViewMatrix = cameraMatrix.inverse() * lightShadowMapMatrix;
    shaderProgram.loadMat44Uniform(location, lightViewMatrix);
  }
}