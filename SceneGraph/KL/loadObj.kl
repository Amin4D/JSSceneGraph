//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOBJ;
use Vec2;
use Vec3;

function loadObj(
  io FabricResource resource,
  io Data objParseHandle
) {
  FabricOBJDecode(resource.data.data(), resource.data.dataSize(), objParseHandle);

  Boolean hadErrors;
  FabricOBJHadErrors( objParseHandle, hadErrors );
  if( hadErrors )
  {
    String errors[];
    FabricOBJGetErrors( objParseHandle, errors );
    for( Integer i = 0; i < errors.size; i++ )
      report 'Error while parsing obj file ' + resource.url + ': ' + errors[i];
  }
}

operator parseObjAndSetVertexCount(
  io FabricResource resource,
  io Data objParseHandle,
  io Boolean reload,
  io Size newCount
) {
  if(reload){
    Boolean validHandle;
    FabricOBJIsHandleValid( objParseHandle, validHandle );
    if( !validHandle )
      loadObj( resource, objParseHandle);

    FabricOBJGetNbPoints(objParseHandle, newCount);
    report "OBJ " + resource.url + ": " + newCount + " vertices";
  }
}

operator setObjGeom(
  io Data objParseHandle,
  io Integer indices[],
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Vec2 uvs<>,
  io Boolean reload
) {
  if(reload){
    FabricOBJGetTriangleIndices( objParseHandle, indices );
    FabricOBJGetPointsSliced( objParseHandle, positions );
    FabricOBJGetNormalsSliced( objParseHandle, normals );
  
    Boolean hasTexture = false;
    FabricOBJHasTextureCoords( objParseHandle, hasTexture );
    if( hasTexture )
    {
      FabricOBJGetTextureCoordsSliced( objParseHandle, uvs );
    }
    if(positions.size()>1){
      reload = false;
    }
  }
}

operator freeObjParsedData(
  io Data objParseHandle
) {
  FabricOBJFreeParsedData(objParseHandle);
}
