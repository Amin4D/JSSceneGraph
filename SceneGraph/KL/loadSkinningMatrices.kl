//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Mat44;
use Xfo;
use OGLBuffer;
use OGLShaderProgram;
use FabricOGL;

operator loadSkinningMatrices(
  io OGLShaderProgram shaderProgram,
  io Xfo pose[],
  io Mat44 invMatrices[],
  io Integer boneMapping[],
  io OGLBuffer indicesBuffer,
  io Boolean drawToggle
) {
//  report("loadSkinningMatrices");
  Integer location = shaderProgram.getUniformLocation(SKINNING_MATRICES_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 skinningMatrices[];
    skinningMatrices.resize(invMatrices.size());
    for (var Integer i = 0; i < invMatrices.size(); i++) {
      if(boneMapping[i] < 0)
        continue;
      skinningMatrices[i] = (pose[boneMapping[i]].toMat44() * invMatrices[i]).transpose();
    }
    shaderProgram.loadMat44TransposedUniformArray(location, skinningMatrices);
  }
}
