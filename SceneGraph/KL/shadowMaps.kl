//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

#include 'FABRIC_ROOT/SceneGraph/KL/drawTexture.kl'

use Vec2;
use Mat44;
use OGLRenderTarget;
use OGLTexture2D;

function Mat44 symmetricFrustum(Scalar r, Scalar t, Scalar n, Scalar f) {
  var Mat44 result(
    n / r, 0.0, 0.0, 0.0,
    0.0, n / t, 0.0, 0.0,
    0.0, 0.0, -(f + n) / (f - n), - 1.0,
    0.0, 0.0, -(2.0 * f * n) / (f - n), 0.0);
  return result;
}

operator calcLightProjectionMatricies(
  io Scalar near,
  io Scalar far,
  io Scalar fovY,
  io Mat44 lightInvMat,
  io Mat44 lightProjectionMat,
  io Mat44 shadowMat
) {
  //  report( "calcLightProjectionMatricies" );
  
  var Scalar frustumH = tan(fovY / 2) * near;
  var Scalar frustumW = frustumH;

  lightProjectionMat = symmetricFrustum(frustumW, frustumH, near, far);

  var Mat44 biasMat;
  biasMat.setNull();
  biasMat.setDiagonal(0.5);
  biasMat.setTranslation(Vec4(0.5, 0.5, 0.5, 1.0));

  shadowMat = lightInvMat * lightProjectionMat * biasMat;
}

operator bindShadowMapBuffer(
  io Size textureUnit,
  io OGLRenderTarget depthRenderTarget
) {
  Integer depthTextureID = depthRenderTarget.textures[depthRenderTarget.depthBuffer].texture.bufferID;
//  report("bindShadowMapBuffer textureUnit:"+textureUnit+" depthTextureID:"+ depthTextureID);
  glActiveTexture(GL_TEXTURE0 + textureUnit);
  glBindTexture(GL_TEXTURE_2D, depthTextureID);
}

operator debugShadowMapBuffer(
  io OGLRenderTarget depthRenderTarget,
  io Integer program
) {
  
  OGLTexture2D colorTexture;// = depthRenderTarget.getFirstColorTexture();
  for(Integer i=0; i<depthRenderTarget.textures.size(); i++){
    if(depthRenderTarget.textures[i].type == 2){//this.COLOR_BUFFER
      colorTexture = depthRenderTarget.textures[i].texture;
    }
  }
  if(colorTexture.bufferID > 0 ){
    Integer textureUnit = 0;
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, colorTexture.bufferID);
    
    Vec2 tl(-1.0, 1.0);
    Vec2 br(-0.5, 0.5);
    drawTexture(textureUnit, program, tl, br, false);
  }else{
    report("Error: no color textures found");
  }
}