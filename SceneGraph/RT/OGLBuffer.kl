//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL;

function OGLBuffer.genBuffer(
  Data bufferData,
  Size bufferSize,
  Size bufferDataElementCount
) {
  if (self.bufferID <= 0 || bufferDataElementCount != self.elementCount || self.bufferUsage == GL_DYNAMIC_DRAW || self.reload) {
    if (self.bufferID != 0 && (bufferDataElementCount != self.elementCount || self.reload)) {
      var Size bufferIDs[];
      bufferIDs.push(Size(self.bufferID));
      glDeleteBuffers(1, bufferIDs);
      self.bufferID = 0;
    }
    if (bufferSize > 0) {
      if (self.bufferID == 0) {
        var Size buffers[];
        buffers.push(Size(0));
        glGenBuffers(1, buffers);
        self.bufferID = Integer(buffers[0]);
      }
      // Now fill the buffer with the data
      glBindBuffer(self.bufferType, self.bufferID);
      glBufferData(self.bufferType, bufferSize, bufferData, self.bufferUsage);
      glBindBuffer(self.bufferType, 0);
      self.elementCount = bufferDataElementCount;
    }
    self.reload = false;
  }
}

function OGLBuffer.bindBuffer(
  Integer bufferLocation
) {
  if (self.bufferID > 0) {
    var Data NULL;
    glBindBuffer(self.bufferType, self.bufferID);
    if (bufferLocation != - 1) {
      glEnableVertexAttribArray(bufferLocation);
      glVertexAttribPointer(bufferLocation, self.numBufferElementComponents, self.bufferElementComponentType, GL_FALSE, self.elementDataSize, NULL);
    }
    else {
      report('Invalid shader attribute location for VBO.');
    }
    glBindBuffer(self.bufferType, 0);
  }
}
