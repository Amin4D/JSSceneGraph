//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL;

function OGLTexture2D.configure(
  Size width,
  Size height,
  Data pixels,
  Size nbPixels,
  io Integer textureUnit
) {
  if(nbPixels > 0){
    if(this.bufferID == 0){
      var Size buffers[];
      buffers.resize(1);
      glGenTextures(1, buffers);
      this.bufferID = buffers[0];
    }
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, this.bufferID);
    
    //Generate the texture
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    if (nbPixels == (width * height))
      glTexImage2D(GL_TEXTURE_2D, 0, this.glInternalFormat, width, height, 0, this.glFormat, this.glType, pixels);

    if(this.clamp){
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    } else {
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    }
    this.nbPixels = nbPixels;
  }
}


function OGLTexture2D.bind(io Integer textureUnit){
//  report("OGLTexture2D.bind bufferID:"+this.bufferID + " textureUnit:"+textureUnit  + " nbPixels:"+ this.nbPixels );
  glActiveTexture(GL_TEXTURE0 + textureUnit);
  glBindTexture(GL_TEXTURE_2D, this.bufferID);
}


function OGLTexture2D.bindImageLDR(
  io Size width,
  io Size height,
  io RGBA bitmap[],
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    this.configure(width, height, bitmap.data(), bitmap.size(), textureUnit);
  }
  this.bind(textureUnit);
}


function OGLTexture2D.bindImageHDR(
  io Size width,
  io Size height,
  io Color bitmap[],
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    this.configure(width, height, bitmap.data(), bitmap.size(), textureUnit);
  }
  this.bind(textureUnit);
}

function OGLTexture2D.bindImageMatrix(
  io Mat44 matrices<>,
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    this.configure(Size(1024), Size(1024), matrices.data(), Size(1024 * 1024), textureUnit);
  }
  this.bind(textureUnit);
}

function OGLTexture2D.genTexture(
  Size width,
  Size height
) {
//  report("OGLTexture2D.genTexture width:" + width + " height:" + height);
  
  var Data NULL;
  /////////////////////////////////////////////////////
  // Color Texture
  Size bufferIDs[];
  bufferIDs.push(Size(0));
  glGenTextures(1, bufferIDs);
  this.bufferID = bufferIDs[0];
  
  glBindTexture(GL_TEXTURE_2D, this.bufferID);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
  
  if(this.glInternalFormat == GL_DEPTH_COMPONENT){
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
    glTexParameteri(GL_TEXTURE_2D, GL_DEPTH_TEXTURE_MODE, GL_INTENSITY);
  }else{
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
  }
  
  //NULL means reserve texture memory, but texels are undefined
  glTexImage2D(GL_TEXTURE_2D, 0, this.glInternalFormat, width, height, 0, this.glFormat, this.glType, NULL);
  
  this.nbPixels = width * height;
}


