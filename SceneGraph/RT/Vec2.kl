
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

function Vec2(Scalar x, Scalar y) {
  self.x = x;
  self.y = y;
}

function Vec2.set(Scalar x, Scalar y) {
  self.x = x;
  self.y = y;
}

function Vec2.setNull() {
  self.x = self.y = 0.0;
}

function Vec2 + (Vec2 a, Vec2 b) {
  return Vec2(a.x + b.x, a.y + b.y);
}

function Vec2. += (Vec2 other) {
  self = self + other;
}

function Vec2 - (Vec2 a, Vec2 b) {
  return Vec2(a.x - b.x, a.y - b.y);
}

function Vec2. -= (Vec2 other) {
  self = self - other;
}

function Vec2 * (Scalar a, Vec2 b) {
  return Vec2(a * b.x, a * b.y);
}

function Vec2 * (Vec2 a, Scalar b) {
  return Vec2(a.x * b, a.y * b);
}

function Vec2 * (Vec2 a, Vec2 b) {
  return Vec2(a.x * b.x, a.y * b.y);
}

function Vec2. *= (Scalar other) {
  self = self * other;
}

function Vec2. *= (Vec2 other) {
  self = self * other;
}

function Vec2 / (Vec2 a, Vec2 b) {
  return Vec2(a.x / b.x, a.y / b.y);
}

function Vec2 / (Scalar a, Vec2 b) {
  return Vec2(a / b.x, a / b.y);
}

function Vec2 / (Vec2 a, Scalar b) {
  return Vec2(a.x / b, a.y / b);
}

function Vec2. /= (Scalar other) {
  self = self / other;
}

function Vec2. /= (Vec2 other) {
  self = self / other;
}

function Vec2 Vec2.neg() {
  return Vec2(-self.x, - self.y);
}

function Scalar Vec2.dot(Vec2 other) {
  return self.x * other.x + self.y * other.y;
}

function Scalar Vec2.normSq() {
  return self.dot(self);
}

function Scalar Vec2.norm() {
  return sqrt(self.normSq());
}

function Vec2 Vec2.unit() {
  var Scalar n = self.norm();
  if (n > 0.0) {
    return self / n;
  }
  return self;
}

function Vec2.setUnit() {
  self = self.unit();
}

function Scalar Vec2.distSq(in Vec2 other) {
  var Vec2 v;
  v = self - other;
  return v.normSq();
}

function Scalar Vec2.dist(in Vec2 other) {
  return sqrt(self.distSq(other));
}

function Scalar Vec2.det(in Vec2 other) {
  return self.x * other.y - self.y * other.x;
}

function Vec2 Vec2.max(in Vec2 other) {
  var Vec2 v;
  v.x = self.x > other.x ? self.x : other.x;
  v.y = self.y > other.y ? self.y : other.y;
  return v;
}

function Vec2 Vec2.min(in Vec2 other) {
  var Vec2 v;
  v.x = self.x < other.x ? self.x : other.x;
  v.y = self.y < other.y ? self.y : other.y;
  return v;
}
