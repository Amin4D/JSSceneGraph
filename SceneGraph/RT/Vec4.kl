
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

function Vec4(Scalar x, Scalar y, Scalar z, Scalar t) {
  self.x = x;
  self.y = y;
  self.z = z;
  self.t = t;
}

function Vec4.set(Scalar x, Scalar y, Scalar z, Scalar t) {
  self.x = x;
  self.y = y;
  self.z = z;
  self.t = t;
}

function Vec4.setNull() {
  self.x = self.y = self.z = self.t = 0.0;
}

function Vec4 + (Vec4 a, Vec4 b) {
  return Vec4(a.x + b.x, a.y + b.y, a.z + b.z, a.t + b.t);
}

function Vec4. += (Vec4 other) {
  self = self + other;
}

function Vec4 - (Vec4 a, Vec4 b) {
  return Vec4(a.x - b.x, a.y - b.y, a.z - b.z, a.t - b.t);
}

function Vec4. -= (Vec4 other) {
  self = self - other;
}

function Vec4 * (Scalar a, Vec4 b) {
  return Vec4(a * b.x, a * b.y, a * b.z, a * b.t);
}

function Vec4 * (Vec4 a, Scalar b) {
  return Vec4(a.x * b, a.y * b, a.z * b, a.t * b);
}

function Vec4 * (Vec4 a, Vec4 b) {
  return Vec4(a.x * b.x, a.y * b.y, a.z * b.z, a.t * b.t);
}

function Vec4. *= (Scalar other) {
  self = self * other;
}

function Vec4. *= (Vec4 other) {
  self = self * other;
}

function Vec4 / (Vec4 a, Vec4 b) {
  return Vec4(a.x / b.x, a.y / b.y, a.z / b.z, a.t / b.t);
}

function Vec4 / (Scalar a, Vec4 b) {
  return Vec4(a / b.x, a / b.y, a / b.z, a / b.t);
}

function Vec4 / (Vec4 a, Scalar b) {
  return Vec4(a.x / b, a.y / b, a.z / b, a.t / b);
}

function Vec4. /= (Scalar other) {
  self = self / other;
}

function Vec4. /= (Vec4 other) {
  self = self / other;
}

function Vec4 Vec4.neg() {
  return Vec4(-self.x, - self.y, - self.z, - self.t);
}

function Scalar Vec4.dot(in Vec4 other) {
  return self.x * other.x + self.y * other.y + self.z * other.z + self.t * other.t;
}

function Scalar Vec4.normSq() {
  return self.dot(self);
}

function Scalar Vec4.norm() {
  return sqrt(self.normSq());
}

function Vec4 Vec4.unit() {
  var Scalar n = self.norm();
  if (n > 0.0)
    return self / n;
  return self;
}

function Vec4.setUnit() {
  self = self.unit();
}

function Vec4 Vec4.max(in Vec4 other) {
  var Vec4 v;
  v.x = self.x > other.x ? self.x : other.x;
  v.y = self.y > other.y ? self.y : other.y;
  v.z = self.z > other.z ? self.z : other.z;
  v.t = self.t > other.t ? self.t : other.t;
  return v;
}

function Vec4 Vec4.min(in Vec4 other) {
  var Vec4 v;
  v.x = self.x < other.x ? self.x : other.x;
  v.y = self.y < other.y ? self.y : other.y;
  v.z = self.z < other.z ? self.z : other.z;
  v.t = self.t < other.t ? self.t : other.t;
  return v;
}


function Vec4 Vec4.lerp(in Vec4 other, in Scalar t) {
  return self + ((other - self) * t);
}
