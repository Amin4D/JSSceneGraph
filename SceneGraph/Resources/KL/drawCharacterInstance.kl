
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator drawCharacterInstance(
  io ShaderValue uniformValues[],
  io Mat44 boneMatrices[],
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io Integer indicesBufferID,
  io Size indicesCount
) {
  //  report("drawCharacterInstance");

  Mat33 normalMatrix;
  Mat44 modelMatrix, modelViewMatrix, projectionMatrixInv, modelViewProjectionMatrix;

  for (Integer i = 0; i < uniformValues.size(); i++) {
    var ShaderValue uniform = uniformValues[i];
    switch (uniform.id) {
      case BONE_MATRICIES_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          glUniformMatrix4fv(uniform.location, boneMatrices.size(), false, boneMatrices.data());
        }
        break;
      case MODELMATRIX_ATTRIBUTE_ID:
        break;
      case VIEWMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          glUniformMatrix4fv(uniform.location, 1, false, cameraMatrix.data());
        }
        break;
      case PROJECTIONMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          glUniformMatrix4fv(uniform.location, 1, false, projectionMatrix.data());
        }
        break;
      case NORMALMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          modelViewMatrix = cameraMatrix;
          normalMatrix = modelViewMatrix.upperLeft().inverse().transpose();
          glUniformMatrix3fv(uniform.location, 1, false, normalMatrix.data());
        }
        break;
      case PROJECTIONMATRIXINV_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          projectionMatrixInv = projectionMatrix.inverse();
          glUniformMatrix4fv(uniform.location, 1, false, projectionMatrixInv.data());
        }
        break;
      case MODELVIEW_MATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          glUniformMatrix4fv(uniform.location, 1, false, cameraMatrix.data());
        }
        break;
      case MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          modelViewProjectionMatrix = cameraMatrix * projectionMatrix;
          glUniformMatrix4fv(uniform.location, 1, false, modelViewProjectionMatrix.data());
        }
        break;
    }
  }

  Data NULL;
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBufferID);
  glDrawElements(GL_TRIANGLES, indicesCount, GL_UNSIGNED_INT, NULL);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
}