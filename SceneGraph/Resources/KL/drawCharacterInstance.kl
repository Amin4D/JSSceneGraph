
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator drawCharacterInstance(
  io ShaderValue uniformValues[],
  io Mat44 boneMatrices[],
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io Integer indicesBufferID,
  io Size indicesCount
) {
  //  report("drawCharacterInstance");

  Mat33 normalMatrices[];
  normalMatrices.resize(1);
  Mat44 modelMatrices[], modelViewMatrices[];
  modelMatrices.resize(1);
  modelViewMatrices.resize(1);

  for (Integer i = 0; i < uniformValues.size(); i++) {
    var ShaderValue uniform = uniformValues[i];
    switch (uniform.id) {
      case BONE_MATRICIES_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          glUniformMatrix4fv(uniform.location, boneMatrices.size(), false, boneMatrices);
        }
        break;
      case MODELMATRIX_ATTRIBUTE_ID:
        break;
      case VIEWMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          Mat44 cameraMatrices[];
          cameraMatrices.push(cameraMatrix);
          glUniformMatrix4fv(uniform.location, 1, false, cameraMatrices);
        }
        break;
      case PROJECTIONMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          Mat44 projectionMatrices[];
          projectionMatrices.push(projectionMatrix);
          glUniformMatrix4fv(uniform.location, 1, false, projectionMatrices);
        }
        break;
      case NORMALMATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          modelViewMatrices[0] = cameraMatrix;
          normalMatrices[0] = modelViewMatrices[0].upperLeft().inverse().transpose();
          glUniformMatrix3fv(uniform.location, 1, false, normalMatrices);
        }
        break;
      case PROJECTIONMATRIXINV_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          Mat44 projectionMatricesInv[];
          projectionMatricesInv.push(projectionMatrix.inverse());
          glUniformMatrix4fv(uniform.location, 1, false, projectionMatricesInv);
        }
        break;
      case MODELVIEW_MATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          Mat44 cameraMatrices[];
          cameraMatrices.push(cameraMatrix);
          glUniformMatrix4fv(uniform.location, 1, false, cameraMatrices);
        }
        break;
      case MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID:
        if (uniform.location != - 1) {
          Mat44 modelViewProjectionMatrices[];
          modelViewProjectionMatrices.push(cameraMatrix * projectionMatrix);
          glUniformMatrix4fv(uniform.location, 1, false, modelViewProjectionMatrices);
        }
        break;
    }
  }

  Data NULL;
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBufferID);
  glDrawElements(GL_TRIANGLES, indicesCount, GL_UNSIGNED_INT, NULL);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
}