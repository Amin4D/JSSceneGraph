
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator drawCharacterInstance(
  io OGLShaderProgram shaderProgram,
  io Mat44 boneMatrices[],
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io OGLBuffer indicesBuffer,
  io Boolean drawToggle
) {
  if(!drawToggle)
    return;

//  report("drawCharacterInstance");
  Data NULL;
  Integer location = shaderProgram.getUniformLocation(BONE_MATRICIES_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadMat44UniformArray(location, boneMatrices);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_TRIANGLES, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  }
  else{
    //report("ERROR: Character Material must use bone matrices.");
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_TRIANGLES, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  }
}
