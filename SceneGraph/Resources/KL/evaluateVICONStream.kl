
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

operator viconReceiveCount(
  io String hostname,
  io Integer tryCount,
  io Size newCount,
  io Scalar time
) {
  FabricVICONInit(hostname, newCount, time, tryCount);
}

operator viconReceivePositions(
  io Vec3 positions[],
  io Scalar scale
) {
  var Scalar viconPositions[];
  FabricVICONReceive(viconPositions);
  if (positions.size() * 3 == viconPositions.size()) {
    for (var Size i = 0; i < positions.size(); i++) {
      positions[i] = Vec3(viconPositions[i * 3 + 0], viconPositions[i * 3 + 1], viconPositions[i * 3 + 2]) * scale;
    }
  }
}

operator viconStabilizePositions(
  io Vec3 position,
  io ViconPositionInfo info,
  io Vec3 trackers[]
) {
  position.x = position.y = position.z = 0.0;
  if(info.weights.size() == info.IDs.size()){
    for(var Size i=0;i<info.weights.size();i++){
      position += trackers[info.IDs[i]] * info.weights[i];
    }
  }
}

/*
operator viconProjectBones(
  io Bone bones[],
  io ViconBoneInfo infos[],
  io Vec3 points[]
) {
  if (bones.size() == infos.size()) {

    // start at 1 to skip root
    for (var Integer i = 1; i < bones.size(); i++) {
      var Vec3 root(0.0, 0.0, 0.0);
      var Vec3 target(0.0, 0.0, 0.0);
      var Vec3 upvector(0.0, 0.0, 0.0);
      var Vec3 helper(0.0, 0.0, 0.0);

      // compute the position of the bone
      if (infos[i].rootIDs.size() == 1) {
        root = points[infos[i].rootIDs[0]];
      }else if (infos[i].rootIDs.size() > 0) {
        for (var Integer j = 0; j < infos[i].rootIDs.size(); j++) {
          root += points[infos[i].rootIDs[j]];
        }
        root /= Scalar(infos[i].rootIDs.size());
      }

      // compute the target of the bone
      if (infos[i].targetIDs.size() == 1) {
        target = points[infos[i].targetIDs[0]];
      }else if (infos[i].targetIDs.size() > 0) {
        for (var Integer j = 0; j < infos[i].targetIDs.size(); j++) {
          target += points[infos[i].targetIDs[j]];
        }
        target /= Scalar(infos[i].targetIDs.size());
      }
      target -= root;
      if(infos[i].invertTarget)
        target = target.neg();

      // compute the upvector of the bone
      if (infos[i].upvectorIDs.size() == 1) {
        upvector = points[infos[i].upvectorIDs[0]];
      }else if (infos[i].upvectorIDs.size() > 0) {
        for (var Integer j = 0; j < infos[i].upvectorIDs.size(); j++) {
          upvector += points[infos[i].upvectorIDs[j]];
        }
        upvector /= Scalar(infos[i].upvectorIDs.size());
      }
      upvector -= root;
      if(infos[i].invertUpvector)
        upvector = upvector.neg();

      // compute the cross products!
      helper = target.cross(upvector);
      upvector = helper.cross(target);

      // assign to the bone data
      bones[i].referencePose.ori = Mat33(target.unit(), upvector.unit(), helper.unit()).transpose();

      bones[i].referencePose.tr = root;
      bones[i].length = target.norm();
      bones[i].radius = 0.05; //upvector.norm() * 0.33;
    }
  }
}*/