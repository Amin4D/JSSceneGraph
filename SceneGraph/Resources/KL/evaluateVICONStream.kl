
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

operator viconReceiveCount(
  io String hostname,
  io Integer tryCount,
  io Size newCount,
  io Scalar time
) {
  FabricVICONInit(hostname, newCount, time, tryCount);
}

operator viconReceivePositions(
  io Vec3 positions[],
  io Scalar scale
) {
  var Scalar viconPositions[];
  FabricVICONReceive(viconPositions);
  if (positions.size() * 3 == viconPositions.size()) {
    for (var Size i = 0; i < positions.size(); i++) {
      positions[i] = Vec3(viconPositions[i * 3 + 0], viconPositions[i * 3 + 1], viconPositions[i * 3 + 2]) * scale;
    }
  }
}

operator viconStabilizePositions(
  io Vec3 position,
  io ViconPositionInfo info,
  io Vec3 trackers[]
) {
  position.x = position.y = position.z = 0.0;
  if(info.weights.size() == info.IDs.size()){
    for(var Size i=0;i<info.weights.size();i++){
      position += trackers[info.IDs[i]] * info.weights[i];
    }
  }
}

operator viconOffsetPositions(
  io Vec3 positions[],
  io ViconOffsetInfo infos[]
) {

  for(var Integer i=0;i<infos.size();i++){
    if(infos[i].index == -1 || infos[i].start == -1 || infos[i].target == -1)
      continue;
      
    var Vec3 dir = positions[infos[i].target] - positions[infos[i].start];
    positions[infos[i].index] += infos[i].factor * dir;
  }
}

operator viconProjectBones(
  io Bone bones[],
  io ViconBoneInfo infos[],
  io Vec3 points[]
) {
  if (bones.size() == infos.size()) {

    // start at 1 to skip root
    for (var Integer i = 1; i < bones.size(); i++) {
      var Vec3 root = points[infos[i].root];
      var Vec3 target = points[infos[i].target];
      var Vec3 upvector = points[infos[i].upvector];

      target -= root;
      upvector -= root;

      if(infos[i].negateTarget)
        target = target.neg();
      if(infos[i].negateUpvector)
        upvector = upvector.neg();

      // compute the cross products!
      var Vec3 helper = target.cross(upvector);
      upvector = helper.cross(target);

      // assign to the bone data
      bones[i].referencePose.ori = Mat33(target.unit(), upvector.unit(), helper.unit()).transpose();

      bones[i].referencePose.tr = root;
      bones[i].length = target.norm();
      bones[i].radius = 0.05; //upvector.norm() * 0.33;
    }
  }
}