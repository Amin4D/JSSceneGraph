
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//


// These must be defined in the preprocessor definitions prior to compilation.
// #define DATA_TYPE Vec3
// #define ATTRIBUTE_ID 7
// #define ATTRIBUTE_NAME "positions"

operator genAndLoadVBO(
  io OGLShaderProgram shaderProgram,
  io DATA_TYPE bufferData[],
  io Size bufferDataCount,
  io Boolean dynamic,
  io Boolean reload,
  io Integer bufferID
) {
  Integer location = shaderProgram.getAttributeLocation(ATTRIBUTE_ID);
//  report("genAndLoadVBO ATTRIBUTE_NAME bufferID:" + bufferID + " bufferDataCount:" + bufferDataCount + " location:" + location );
  if(location!=-1){
    DATA_TYPE val;
    shaderProgram.genAndBindVBO(
      bufferData.data(),
      bufferData.dataSize(),
      val.dataSize(),
      bufferData.size(),
      bufferDataCount,
      location,
      dynamic,
      reload,
      bufferID);
      
    reload = false;
    return;
  }
}

operator bindVBO(
  io OGLShaderProgram shaderProgram,
  io Integer dgbufferID,
  io Size dgbufferDataCount,
  io Size ehbufferDataCount,
) {
//  report("bindVBO ATTRIBUTE_NAME :" + dgbufferID  );
  Integer location = shaderProgram.getAttributeLocation(ATTRIBUTE_ID);
  if(location!=-1){
    DATA_TYPE val;
    shaderProgram.bindBuffer(val.dataSize(), dgbufferID, location);
    return;
  }
}
