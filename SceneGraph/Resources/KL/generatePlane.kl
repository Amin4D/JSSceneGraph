
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator setPlaneVertexCount(
  io Integer lengthSections,
  io Integer widthSections,
  io Size newCount
) {
  var Integer vi = 0;
  var Integer ii = 0;

  if (lengthSections < 1) {
    lengthSections = 1;
  }
  if (widthSections < 1) {
    widthSections = 1;
  }

  newCount = 2 * (lengthSections + 1) * (widthSections + 1);
}

operator generatePlane(
  io Integer idx[],
  io Scalar length,
  io Scalar width,
  io Integer lengthSections,
  io Integer widthSections,

  io Vec3 positions[],
  io Vec3 normals[],
  io Vec2 uvs[]
) {
  var Integer vi = 0;
  var Integer ii = 0;

  if (lengthSections < 1) {
    lengthSections = 1;
  }
  if (widthSections < 1) {
    widthSections = 1;
  }

  Integer numPoints = (lengthSections + 1) * (widthSections + 1);
  //  positions.resize( numPoints );
  //  normals.resize( numPoints );
  //  uvs.resize( numPoints );
  idx.resize(2 * 6 * lengthSections * widthSections);

  for (Integer i = 0; i <= lengthSections; i++) {
    for (Integer j = 0; j <= widthSections; j++) {
      Scalar x = (Scalar(i) / Scalar(lengthSections)) - 0.5;
      Scalar z = (Scalar(j) / Scalar(widthSections)) - 0.5;
      positions[vi] = Vec3(x * length, 0.0, z * width);
      normals[vi] = Vec3(0.0, 1.0, 0.0);
      uvs[vi] = Vec2(x + 0.5, z + 0.5);
      vi++;
      positions[vi] = Vec3(x * length, 0.0, z * width);
      normals[vi] = Vec3(0.0, - 1.0, 0.0);
      uvs[vi] = Vec2(x + 0.5, z + 0.5);
      vi++;
    }
  }

  for (Integer i = 0; i < lengthSections; i++) {
    for (Integer j = 0; j < widthSections; j++) {
      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 0);
      idx[ii++] = 2 * (j + 0);
      idx[ii++] = 2 * (j + 1);
      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 0);
      idx[ii++] = 2 * (j + 1);
      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 1);

      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 1) + 1;
      idx[ii++] = 2 * (j + 1) + 1;
      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 0) + 1;
      idx[ii++] = 2 * (j + 1) + 1;
      idx[ii++] = 2 * (j + 0) + 1;
      idx[ii++] = 2 * (j + ((lengthSections + 1) * (i + 1)) + 0) + 1;
    }
  }
}