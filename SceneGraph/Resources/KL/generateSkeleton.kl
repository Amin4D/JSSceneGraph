
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

operator generateSkeleton(
  io Bone bones[],
  io Xfo pose[],
  io Vec3 positions[],
  io Integer indices[],
  io Scalar boneradius,
  io Xfo offsetpose
) {
  // first loop over all bones and count the ones with a length
  var Integer nbBones = 0;
  var Xfo finalPose[];
  finalPose.resize(pose.size());
  for (var Integer i = 0; i < bones.size(); i++) {
    if (bones[i].length > 0.0) {
      nbBones++;
    }
    finalPose[i] = offsetpose.project(pose[i]);
  }

  var Integer nbPos = nbBones * 12;
  indices.resize(nbPos);

  positions.resize(nbPos);

  if (nbPos == 0) {
    report('Warning: No drawable bones found in skeleton!');
    return;
  }

  var Vec3 y(0.0, boneradius * 3.0, 0.0);
  var Vec3 z(0.0, 0.0, boneradius);
  var Vec3 tip;
  var Vec3 center;

  var Integer offset = 0;
  for (Integer i = 0; i < bones.size(); i++) {

    if (bones[i].length <= 0.0) {
      continue;
    }

    tip = finalPose[i].transform(Vec3(bones[i].length * finalPose[i].sc.x, 0.0, 0.0));
    center = finalPose[i].tr * 0.8 + tip * 0.2;

    // create a line along positive z
    indices[offset] = offset;
    positions[offset] = finalPose[i].tr;
    offset++;
    indices[offset] = offset;
    positions[offset] = center + finalPose[i].ori.transform(z * bones[i].radius * finalPose[i].sc.z);
    offset++;
    indices[offset] = offset;
    positions[offset] = positions[offset - 1];
    offset++;
    indices[offset] = offset;
    positions[offset] = tip;
    offset++;

    // create a line along negative z
    indices[offset] = offset;
    positions[offset] = finalPose[i].tr;
    offset++;
    indices[offset] = offset;
    positions[offset] = center - finalPose[i].ori.transform(z * bones[i].radius * finalPose[i].sc.z);
    offset++;
    indices[offset] = offset;
    positions[offset] = positions[offset - 1];
    offset++;
    indices[offset] = offset;
    positions[offset] = tip;
    offset++;

    // create a line along positive y
    indices[offset] = offset;
    positions[offset] = finalPose[i].tr;
    offset++;
    indices[offset] = offset;
    positions[offset] = center + finalPose[i].ori.transform(y * bones[i].radius * finalPose[i].sc.y);
    offset++;
    indices[offset] = offset;
    positions[offset] = positions[offset - 1];
    offset++;
    indices[offset] = offset;
    positions[offset] = tip;
    offset++;
  }
}