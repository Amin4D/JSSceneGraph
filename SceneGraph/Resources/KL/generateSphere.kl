
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//


operator setSphereVertexCount(
  io Integer detail,
  io Size newCount
) {
  var Integer slices = (detail >= 0) ? (detail * 2 + 3) : 3;
  var Integer loops = (detail >= 0) ? (detail + 1) : 1;

  newCount = 2 * slices * (2 + loops);
}

operator generateSphere(
  io Scalar radius,
  io Integer detail,

  io Integer indices[],
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Vec2 uvs<>
) {
  var Integer slices = (detail >= 0) ? (detail * 2 + 3) : 3;
  var Integer loops = (detail >= 0) ? (detail + 1) : 1;

  var Scalar Pi = 3.141592653589793238462643383279;

  var Integer numTriangles, numVertices, nbSlices, nbLoops;

  nbLoops = loops + 1;
  nbSlices = slices + 1;
  
  numTriangles = 2 * slices * (loops + 1);
  numVertices = (1 + slices) * (2 + loops);
  
  indices.resize(numTriangles * 3);

  var Integer voff = 0;
  for (var Integer i = 0; i <= nbLoops; i++) {
    var Scalar theta = (i / Scalar(nbLoops)) * Pi;
    for (var Integer j = 0; j < nbSlices; j++) {
      var Scalar phi = (j / Scalar(slices)) * 2.0 * Pi;

      normals[voff] = Vec3(
        sin(theta) * cos(phi),
        cos(theta),
        sin(theta) * sin(phi)
      );

      positions[voff] = normals[voff] * radius;
      uvs[voff] = Vec2(1.0 - Scalar(j) / Scalar(slices), Scalar(i + 1) / Scalar(loops + 1));
      voff++;
    }
  }
  
  var Integer fid = 0;
  var Integer tid = 0;
  
  // Body of the sphere
  for (var Integer i = 0; i < nbLoops; i++) {
    for (var Integer j = 0; j < slices; j++) {
      
      var Integer v0, v1, v2, v3;
      v0 = (nbSlices * i) + j;
      v1 = (nbSlices * i) + ((j + 1) % nbSlices);
      v2 = (nbSlices * (i+1)) + ((j + 1) % nbSlices);
      v3 = (nbSlices * (i+1)) + j;
      
      indices[tid++] = v0;
      indices[tid++] = v1;
      indices[tid++] = v3;
      fid++;
      
      indices[tid++] = v1;
      indices[tid++] = v2;
      indices[tid++] = v3;
      fid++;
    }
  }
}