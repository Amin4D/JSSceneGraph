function Integer sobelTable(in Integer x, in Integer y) {
  if (y == 0 || y == 2) {
    if (x == 0)return - 1;
      if (x == 1)return 0;
      if (x == 2)return 1;
    }
  else if (y == 1) {
    if (x == 0)return - 2;
      if (x == 1)return 0;
      if (x == 2)return 2;
    }

  return 0;
}

operator filterEdgesSobel(
  io Size width,
  io Size height,
  io RGB pixels[],
  io Boolean mute
) {
  if (mute)
    return;

  // make a copy of the old array
  var RGB oldPixels[] = pixels;

  var Size index = 0;
  for (var Integer y = 0; y < height; y++) {
    for (var Integer x = 0; x < width; x++) {
      var Size sum;
      if (y == 0 || y == height - 1 || x == 0 || x == width - 1)
        sum = 0;
      else {
        var Size sumX = 0;
        var Size sumY = 0;
        for (var Integer I = - 1; I <= 1; I++) {
          for (var Integer J = - 1; J <= 1; J++) {
            var Integer piX = J + x;
            var Integer piY = I + y;
            var Size pi = piY * width + piX;
            var Size r = oldPixels[pi].r;
            var Size g = oldPixels[pi].g;
            var Size b = oldPixels[pi].b;
            var Size nc = (r + g + b) / 3;
            sumX = sumX + (nc) * sobelTable(J + 1, I + 1);
            sumY = sumY + (nc) * sobelTable(I + 1, J + 1);
          }
        }

        sum = abs(sumX) + abs(sumY);
      }

      if (sum > 255)
        sum = 255;

      pixels[index].r = sum;
      pixels[index].g = sum;
      pixels[index].b = sum;
      index++;
    }
  }
}

operator filterNegative(
  io Size width,
  io Size height,
  io RGB pixels[],
  io Boolean mute
) {
  if (mute)
    return;

  for (var Integer i = 0; i < pixels.size(); i++) {
    pixels[i].r = 255 - pixels[i].r;
    pixels[i].g = 255 - pixels[i].g;
    pixels[i].b = 255 - pixels[i].b;
  }
}

operator filterSwapRG(
  io Size width,
  io Size height,
  io RGB pixels[],
  io Boolean mute
) {
  if (mute)
    return;

  var Integer tmp;
  for (var Integer i = 0; i < pixels.size(); i++) {
    tmp = pixels[i].r;
    pixels[i].r = pixels[i].g;
    pixels[i].g = tmp;
  }
}