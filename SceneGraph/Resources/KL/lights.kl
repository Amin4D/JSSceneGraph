

operator loadLight(
  io ShaderValue uniformValues[],
  io Integer type,
  io Color color
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    switch (uniform.id) {
      case LIGHTTYPE_ATTRIBUTE_ID:
          if (uniform.location != - 1)
          glUniform1i(uniform.location, type);
        else
          report('spotLight: lightType Location uniform not defined');
        break;
      case LIGHTCOLOR_ATTRIBUTE_ID:
          if (uniform.location != - 1)
          glUniform4f(uniform.location, color.r, color.g, color.b, color.a);
        else
          report('spotLight: lightColor Location uniform not defined');
        break;
    }
  }
}

operator pointLight(
  io ShaderValue uniformValues[],
  io Integer type,
  io Vec3 position,
  io Color color,
  io Mat44 cameraMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    switch (uniform.id) {
      case LIGHTPOS_ATTRIBUTE_ID:
          var Vec4 viewPos = Vec4(position.x, position.y, position.z, 1.0) * cameraMatrix;
        if (uniform.location != - 1)
          glUniform4f(uniform.location, viewPos.x, viewPos.y, viewPos.z, viewPos.t);
        else
          report('pointLight: lightPosition Location uniform not defined');
        break;
    }
  }
}

operator loadDirectionalLight(
  io ShaderValue uniformValues[],
  io Vec3 position,
  io Vec3 direction,
  io Mat44 cameraMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    switch (uniform.id) {
      case LIGHTPOS_ATTRIBUTE_ID:
          var Vec4 viewPos = Vec4(position.x, position.y, position.z, 1.0) * cameraMatrix;
        if (uniform.location != - 1)
          glUniform4f(uniform.location, viewPos.x, viewPos.y, viewPos.z, viewPos.t);
        else
          report('pointLight: lightPosition Location uniform not defined');
        break;
      case LIGHTDIR_ATTRIBUTE_ID:
          var Vec3 viewDir = cameraMatrix.upperLeft().transpose() * direction;
        if (uniform.location != - 1)
          glUniform3f(uniform.location, viewDir.x, viewDir.y, viewDir.z);
        else
          report('spotLight: lightDir Location uniform not defined');
        break;
    }
  }
}

operator loadSpotLight(
  io ShaderValue uniformValues[],
  io Vec3 position,
  io Vec3 target,
  io Scalar coneAngle,
  io Mat44 cameraMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    switch (uniform.id) {
      case LIGHTPOS_ATTRIBUTE_ID:
          Vec3 viewPos = position * cameraMatrix;
        if (uniform.location != - 1)
          glUniform4f(uniform.location, viewPos.x, viewPos.y, viewPos.z, 1.0);
        else
          report('pointLight: lightPosition Location uniform not defined');
        break;
      case LIGHTDIR_ATTRIBUTE_ID:
          Vec3 direction = target - position;
        Vec3 viewDir = (cameraMatrix.upperLeft().transpose() * direction).unit();
        if (uniform.location != - 1)
          glUniform3f(uniform.location, viewDir.x, viewDir.y, viewDir.z);
        else
          report('spotLight: lightDir Location uniform not defined');
        break;
      case LIGHTCOSCUTOFF_ATTRIBUTE_ID:
          if (uniform.location != - 1)
          glUniform1f(uniform.location, acos(coneAngle * 0.5));
        else
          report('spotLight: lightCosCutoff Location uniform not defined');
        break;
    }
  }
}

operator loadLightMatrixUniform(
  io ShaderValue uniformValues[],
  io Mat44 lightShadowMapMatrix,
  io Mat44 cameraMatrix
) {
  for (Integer i = 0; i < uniformValues.size(); i++) {
    if (uniformValues[i].id == LIGHTVIEWMATRIX_ATTRIBUTE_ID) {
      if (uniformValues[i].location != - 1) {
        var Mat44 lightViewShadowMapMatrix = cameraMatrix.inverse() * lightShadowMapMatrix;
        glUniformMatrix4fv(uniformValues[i].location, 1, false, lightViewShadowMapMatrix.data());
      }
      return;
    }
  }
}