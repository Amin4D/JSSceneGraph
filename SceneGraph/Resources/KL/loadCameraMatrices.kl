
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator loadCameraMatrices(
  io ShaderValue uniformValues[],
  io Xfo modelXfo,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    Mat33 normalMatrices[];
    normalMatrices.resize(1);
    Mat44 modelMatrices[], modelViewMatrices[], projectionMatricesInv[], modelViewProjectionMatrices[];
    modelMatrices.resize(1);
    modelViewMatrices.resize(1);
    projectionMatricesInv.resize(1);
    modelViewProjectionMatrices.resize(1);
    
    switch (uniform.id) {
      case MODELMATRIX_ATTRIBUTE_ID:
        modelMatrices[0] = modelXfo;
        glUniformMatrix4fv(uniform.location, 1, false, modelMatrices);
        break;
      case VIEWMATRIX_ATTRIBUTE_ID:
        Mat44 cameraMatrices[];
        cameraMatrices.push(cameraMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, cameraMatrices);
        break;
      case PROJECTIONMATRIX_ATTRIBUTE_ID:
        Mat44 projectionMatrices[];
        projectionMatrices.push(projectionMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatrices);
        break;
      case NORMALMATRIX_ATTRIBUTE_ID:
        modelMatrices[0] = modelXfo;
        modelViewMatrices[0] = modelMatrices[0] * cameraMatrix;
        normalMatrices[0] = modelViewMatrices[0].upperLeft().inverse().transpose();
        glUniformMatrix3fv(uniform.location, 1, false, normalMatrices);
        break;
      case PROJECTIONMATRIXINV_ATTRIBUTE_ID:
        projectionMatricesInv[0] = projectionMatrix.inverse();
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatricesInv);
        break;
      case MODELVIEW_MATRIX_ATTRIBUTE_ID:
        modelMatrices[0] = modelXfo;
        modelViewMatrices[0] = modelMatrices[0] * cameraMatrix;
        glUniformMatrix4fv(uniform.location, 1, false, modelViewMatrices);
        break;
      case MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID:
        modelMatrices[0] = modelXfo;
        modelViewProjectionMatrices[0] = modelMatrices[0] * cameraMatrix * projectionMatrix;
        glUniformMatrix4fv(uniform.location, 1, false, modelViewProjectionMatrices);
        break;
    }
  }
}