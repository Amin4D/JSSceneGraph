
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator loadCameraMatrices(
  io ShaderValue uniformValues[],
  io Xfo modelXfo,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];

    Mat33 normalMatrix;
    Mat44 modelMatrix, modelViewMatrix, projectionMatrixInv, modelViewProjectionMatrix;
    switch (uniform.id) {
      case MODELMATRIX_ATTRIBUTE_ID:
        modelMatrix = modelXfo;
        glUniformMatrix4fv(uniform.location, 1, false, modelMatrix);
        break;
      case VIEWMATRIX_ATTRIBUTE_ID:
        glUniformMatrix4fv(uniform.location, 1, false, cameraMatrix);
        break;
      case PROJECTIONMATRIX_ATTRIBUTE_ID:
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatrix);
        break;
      case NORMALMATRIX_ATTRIBUTE_ID:
          modelMatrix = modelXfo;
        modelViewMatrix = modelMatrix * cameraMatrix;
        normalMatrix = modelViewMatrix.upperLeft().inverse().transpose();
        glUniformMatrix3fv(uniform.location, 1, false, normalMatrix);
        break;
      case PROJECTIONMATRIXINV_ATTRIBUTE_ID:
        projectionMatrixInv = projectionMatrix.inverse();
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatrixInv);
        break;
      case MODELVIEW_MATRIX_ATTRIBUTE_ID:
        modelMatrix = modelXfo;
        modelViewMatrix = modelMatrix * cameraMatrix;
        glUniformMatrix4fv(uniform.location, 1, false, modelViewMatrix);
        break;
      case MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID:
        modelMatrix = modelXfo;
        modelViewProjectionMatrix = modelMatrix * cameraMatrix * projectionMatrix;
        glUniformMatrix4fv(uniform.location, 1, false, modelViewProjectionMatrix);
        break;
    }
  }
}