
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



operator loadLight(
  io OGLShaderProgram shaderProgram,
  io Integer type,
  io Color color,
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
  Integer location;

  location = getUniformLocation(LIGHTTYPE_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadIntegerUniform( location, type );
  }
  location = getUniformLocation(LIGHTCOLOR_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadColorUniform( location,color );
  }
  location = getUniformLocation(LIGHTPOS_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec4 viewPos = lightMatrix.row3 * cameraMatrix;
    shaderProgram.loadVec4Uniform(LIGHTPOS_ATTRIBUTE_ID, viewPos);
  }
}

operator loadDirectionalLight(
  io ShaderValue uniformValues[],
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
  Integer location = getUniformLocation(LIGHTDIR_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec3 viewDir = Vec3(0.0, 0.0, -1.0) * lightMatrix.upperLeft() * cameraMatrix.upperLeft();
    viewDir = viewDir.unit(); //lightMatrix might have scaling
    shaderProgram.loadVec3Uniform( location, type );
  }
}

operator loadSpotLight(
  io ShaderValue uniformValues[],
  io Scalar coneAngle,
  io Mat44 cameraMatrix,
  io Mat44 lightMatrix
) {
  Integer location;

  location = getUniformLocation(LIGHTDIR_ATTRIBUTE_ID);
  if(location!=-1){
    var Vec3 viewDir = Vec3(0.0, 0.0, -1.0) * lightMatrix.upperLeft() * cameraMatrix.upperLeft();
    viewDir = viewDir.unit(); //lightMatrix might have scaling
    shaderProgram.loadVec3Uniform( location, viewDir );
  }
  location = getUniformLocation(LIGHTCOSCUTOFF_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadScalarUniform(location, cos(coneAngle * 0.5));
  }
}

operator loadLightMatrixUniform(
  io ShaderValue uniformValues[],
  io Mat44 lightShadowMapMatrix,
  io Mat44 cameraMatrix
) {
  Integer location = getUniformLocation(LIGHTVIEWMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    var Mat44 lightViewShadowMapMatrices[];
    lightViewShadowMapMatrices.push(cameraMatrix.inverse() * lightShadowMapMatrix);
    shaderProgram.loadMat44Uniform(location, lightViewShadowMapMatrices);
  }
}