
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



function loadModelProjectionMatricesFn(
  io ShaderValue uniformValues[],
  io Xfo modelXfo,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  Size nbUniforms = uniformValues.size();
  for (Size i = 0; i < nbUniforms; i++) {
    var ShaderValue uniform = uniformValues[i];
    
    switch (uniform.id) {
      case MODELMATRIX_ATTRIBUTE_ID:
        Mat44 modelMatrices[];
        modelMatrices.push(Mat44(modelXfo));
        glUniformMatrix4fv(uniform.location, 1, false, modelMatrices);
        break;
      case VIEWMATRIX_ATTRIBUTE_ID:
        Mat44 cameraMatrices[];
        cameraMatrices.push(cameraMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, cameraMatrices);
        break;
      case PROJECTIONMATRIX_ATTRIBUTE_ID:
        Mat44 projectionMatrices[];
        projectionMatrices.push(projectionMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatrices);
        break;
      case NORMALMATRIX_ATTRIBUTE_ID:
        Mat44 modelViewMatrix = Mat44(modelXfo) * cameraMatrix;
        Mat33 normalMatrices[];
        normalMatrices.push(modelViewMatrix.upperLeft().inverse().transpose());
        glUniformMatrix3fv(uniform.location, 1, false, normalMatrices);
        break;
      case PROJECTIONMATRIXINV_ATTRIBUTE_ID:
        Mat44 projectionMatricesInv[];
        projectionMatricesInv.push(projectionMatrix.inverse());
        glUniformMatrix4fv(uniform.location, 1, false, projectionMatricesInv);
        break;
      case MODELVIEW_MATRIX_ATTRIBUTE_ID:
        Mat44 modelViewMatrices[];
        modelViewMatrices.push(Mat44(modelXfo) * cameraMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, modelViewMatrices);
        break;
      case MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID:
        Mat44 modelViewProjectionMatrices[];
        modelViewProjectionMatrices.push(Mat44(modelXfo) * cameraMatrix * projectionMatrix);
        glUniformMatrix4fv(uniform.location, 1, false, modelViewProjectionMatrices);
        break;
    }
  }
}

operator loadModelProjectionMatrices(
  io ShaderValue uniformValues[],
  io Xfo modelXfo,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  loadModelProjectionMatricesFn(
    uniformValues,
    modelXfo,
    cameraMatrix,
    projectionMatrix
  );
}
operator loadIndexedModelProjectionMatrices(
  io ShaderValue uniformValues[],
  io Xfo modelXfos[],
  io Size modelXfoIndex,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  loadModelProjectionMatricesFn(
    uniformValues,
    modelXfos[modelXfoIndex],
    cameraMatrix,
    projectionMatrix
  );
}