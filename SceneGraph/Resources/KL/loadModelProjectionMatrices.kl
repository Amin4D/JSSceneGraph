
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



function loadModelProjectionMatricesFn(
  io OGLShaderProgram shaderProgram,
  Xfo modelXfo,
  Mat44 cameraMatrix,
  Mat44 projectionMatrix
) {
  // report("loadModelProjectionMatrices");
  Integer location;

  location = shaderProgram.getUniformLocation(MODELMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadMat44Uniform(location, Mat44(modelXfo));
  }
  location = shaderProgram.getUniformLocation(VIEWMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadMat44Uniform(location, cameraMatrix);
  }
  location = shaderProgram.getUniformLocation(PROJECTIONMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadMat44Uniform(location, projectionMatrix);
  }
  location = shaderProgram.getUniformLocation(NORMALMATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 modelViewMatrix = Mat44(modelXfo) * cameraMatrix;
    Mat33 normalMatrix = modelViewMatrix.upperLeft().inverse().transpose();
    shaderProgram.loadMat33Uniform(location, normalMatrix);
  }
  location = shaderProgram.getUniformLocation(PROJECTIONMATRIXINV_ATTRIBUTE_ID);
  if(location!=-1){
    shaderProgram.loadMat44Uniform(location, projectionMatrix.inverse());
  }
  location = shaderProgram.getUniformLocation(MODELVIEW_MATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 modelViewMatrix = Mat44(modelXfo) * cameraMatrix;
    shaderProgram.loadMat44Uniform(location, modelViewMatrix);
  }
  location = shaderProgram.getUniformLocation(MODELVIEWPROJECTION_MATRIX_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 modelViewProjectionMatrix = Mat44(modelXfo) * cameraMatrix * projectionMatrix;
    shaderProgram.loadMat44Uniform(location, modelViewProjectionMatrix);
  }
}

operator loadModelProjectionMatrices(
  io OGLShaderProgram shaderProgram,
  io Xfo modelXfo,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  loadModelProjectionMatricesFn(
    shaderProgram,
    modelXfo,
    cameraMatrix,
    projectionMatrix
  );
}
operator loadIndexedModelProjectionMatrices(
  io OGLShaderProgram shaderProgram,
  io Xfo modelXfos[],
  io Size modelXfoIndex,
  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix
) {
  loadModelProjectionMatricesFn(
    shaderProgram,
    modelXfos[modelXfoIndex],
    cameraMatrix,
    projectionMatrix
  );
}