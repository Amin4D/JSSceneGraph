function genSlicedVBO(
  Data bufferData,
  Size bufferOffset,
  Size bufferSubSize,
  Size bufferSize,
  Boolean dynamic,
  io Integer bufferID,
  io Boolean bufferCreated,
) {
  var Boolean genBuffer = (bufferID == 0);
  if (genBuffer) {
    glGenBuffers(1, bufferID);
    bufferCreated = true;
  }
  if (dynamic || bufferCreated) {
    glBindBuffer(GL_ARRAY_BUFFER, bufferID);
    if (bufferOffset == 0) {
      var Data NULL;
      glBufferData(GL_ARRAY_BUFFER, bufferSize, NULL, dynamic ? GL_DYNAMIC_DRAW : GL_STATIC_DRAW);
    }
    glBufferSubData(GL_ARRAY_BUFFER, bufferOffset, bufferSubSize, bufferData);
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    //report("pushed "+bufferID+" from "+bufferOffset+" to "+(bufferOffset+bufferSubSize)+" of total "+bufferSize);
  }
}

/////////////////////////////////////
// Integer

function genSlicedIntegerStaticVBO(
  io Integer bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = false;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedIntegerDynamicVBO(
  io Integer bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = true;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedIntegerAutoVBO(
  io Integer bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  if (bufferID != 0 && bufferSize != bufferData.size())
    deleteSlicedVBO(bufferID);

  genSlicedIntegerDynamicVBO(bufferData, bufferID);
  bufferSize = bufferData.size();
}

/////////////////////////////////////
// Vec2

function genSlicedVec2StaticVBO(
  io Vec2 bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = false;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec2DynamicVBO(
  io Vec2 bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = true;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec2AutoVBO(
  io Vec2 bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  if (bufferID != 0 && bufferSize != bufferData.size())
    deleteSlicedVBO(bufferID);
  genSlicedVec2DynamicVBO(bufferData, bufferID);
  bufferSize = bufferData.size();
}

/////////////////////////////////////
// Vec3

function genSlicedVec3StaticVBO(
  io Vec3 bufferData[][],
  io Integer bufferID
) {
  //report("genSlicedVec3Static : "+bufferData);

  var Boolean dynamic = false;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec3DynamicVBO(
  io Vec3 bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = true;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec3AutoVBO(
  io Vec3 bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  if (bufferID != 0 && bufferSize != bufferData.size())
    deleteSlicedVBO(bufferID);
  genSlicedVec3DynamicVBO(bufferData, bufferID);
  bufferSize = bufferData.size();
}

/////////////////////////////////////
// Vec4

function genSlicedVec4StaticVBO(
  io Vec4 bufferData[][],
  io Integer bufferID
) {
  //report("genSlicedVec4Dynamic : "+bufferData);

  var Boolean dynamic = false;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec4DynamicVBO(
  io Vec4 bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = true;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedVec4AutoVBO(
  io Vec4 bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  if (bufferID != 0 && bufferSize != bufferData.size())
    deleteSlicedVBO(bufferID);
  genSlicedVec4DynamicVBO(bufferData, bufferID);
  bufferSize = bufferData.size();
}

/////////////////////////////////////
// Color

function genSlicedColorStaticVBO(
  io Color bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = false;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedColorDynamicVBO(
  io Color bufferData[][],
  io Integer bufferID
) {
  var Boolean dynamic = true;
  var Boolean bufferCreated = false;
  var Integer bufferSize = 0;
  for (var Integer i = 0; i < bufferData.size(); i++)
    bufferSize += bufferData[i].dataSize();
  var Integer bufferOffset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    genSlicedVBO(bufferData[i].data(), bufferOffset, bufferData[i].dataSize(), bufferSize, dynamic, bufferID, bufferCreated);
    bufferOffset += bufferData[i].dataSize();
  }
}

function genSlicedColorAutoVBO(
  io Color bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  if (bufferID != 0 && bufferSize != bufferData.size())
    deleteSlicedVBO(bufferID);
  genSlicedColorDynamicVBO(bufferData, bufferID);
  bufferSize = bufferData.size();
}

/////////////////////////////////////
// Index

operator genSlicedIndexVBO(
  io Integer bufferData[][],
  io Integer bufferID
) {
  // we do a remapping, since
  // we will flatten all of them
  var Integer newData[][];
  newData.resize(bufferData.size());
  var Integer offset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    newData[i].resize(bufferData[i].size());
    for (var Integer j = 0; j < bufferData[i].size(); j++) {
      newData[i][j] = bufferData[i][j] + offset;
    }
    offset += bufferData[i].size();
  }
  genSlicedIntegerStaticVBO(newData, bufferID);
}

operator genSlicedIndexAutoVBO(
  io Integer bufferData[][],
  io Size bufferSize,
  io Integer bufferID
) {
  var Integer newData[][];
  newData.resize(bufferData.size());
  var Integer offset = 0;
  for (var Integer i = 0; i < bufferData.size(); i++) {
    newData[i].resize(bufferData[i].size());
    for (var Integer j = 0; j < bufferData[i].size(); j++) {
      newData[i][j] = bufferData[i][j] + offset;
    }
    offset += bufferData[i].size();
  }
  genSlicedIntegerAutoVBO(newData, bufferSize, bufferID);
}

operator deleteSlicedVBO(
  io Integer bufferID
) {
  glDeleteBuffers(1, bufferID);
  bufferID = 0;
}

//////////////////////////////////
// BindBuffer

function loadSlicedVBO(
  Integer datumSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  var Data NULL;
  glBindBuffer(GL_ARRAY_BUFFER, bufferID);
  glEnableVertexAttribArray(shaderBufferLocation);
  glVertexAttribPointer(shaderBufferLocation, 3, GL_FLOAT, GL_FALSE, datumSize, NULL);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
}

function loadSlicedIntegerVBO(
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  loadSlicedVBO(4/* sizeof(Integer) */, bufferID, shaderBufferLocation);
}

function loadSlicedVec2VBO(
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  loadSlicedVBO(8/* sizeof(Vec2) */, bufferID, shaderBufferLocation);
}

function loadSlicedVec3VBO(
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  loadSlicedVBO(12/* sizeof(Vec3) */, bufferID, shaderBufferLocation);
}

function loadSlicedVec4VBO(
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  loadSlicedVBO(16/* sizeof(Vec4) */, bufferID, shaderBufferLocation);
}

function loadSlicedColorVBO(
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  loadSlicedVBO(16/* sizeof(Color) */, bufferID, shaderBufferLocation);
}

//////////////////////////////////
// Gen and BindBuffer
// Integer
operator genAndLoadSlicedIntegerVBO(
  io Integer bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedIntegerStaticVBO(bufferData, bufferID);
  loadSlicedIntegerVBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedDynamicIntegerVBO(
  io Integer bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedIntegerDynamicVBO(bufferData, bufferID);
  loadSlicedIntegerVBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedAutoIntegerVBO(
  io Integer bufferData[][],
  io Size bufferSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedIntegerAutoVBO(bufferData, bufferSize, bufferID);
  loadSlicedIntegerVBO(bufferID, shaderBufferLocation);
}

/////////////////////////////////////
// Vec2

operator genAndLoadSlicedVec2VBO(
  io Vec2 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec2StaticVBO(bufferData, bufferID);
  loadSlicedVec2VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedDynamicVec2VBO(
  io Vec2 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec2DynamicVBO(bufferData, bufferID);
  loadSlicedVec2VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedAutoVec2VBO(
  io Vec2 bufferData[][], io Size bufferSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec2AutoVBO(bufferData, bufferSize, bufferID);
  loadSlicedVec2VBO(bufferID, shaderBufferLocation);
}

/////////////////////////////////////
// Vec3

operator genAndLoadSlicedVec3VBO(
  io Vec3 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec3StaticVBO(bufferData, bufferID);
  loadSlicedVec3VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedDynamicVec3VBO(
  io Vec3 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec3DynamicVBO(bufferData, bufferID);
  loadSlicedVec3VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedAutoVec3VBO(
  io Vec3 bufferData[][],
  io Size bufferSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec3AutoVBO(bufferData, bufferSize, bufferID);
  loadSlicedVec3VBO(bufferID, shaderBufferLocation);
}
/////////////////////////////////////
// Vec4

operator genAndLoadSlicedVec4VBO(
  io Vec4 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec4StaticVBO(bufferData, bufferID);
  loadSlicedVec4VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedDynamicVec4VBO(
  io Vec4 bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec4DynamicVBO(bufferData, bufferID);
  loadSlicedVec4VBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedAutoVec4VBO(
  io Vec4 bufferData[][],
  io Size bufferSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedVec4AutoVBO(bufferData, bufferSize, bufferID);
  loadSlicedVec4VBO(bufferID, shaderBufferLocation);
}

/////////////////////////////////////
// Color
operator genAndLoadSlicedColorVBO(
  io Color bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedColorStaticVBO(bufferData, bufferID);
  loadSlicedColorVBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedDynamicColorVBO(
  io Color bufferData[][],
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedColorDynamicVBO(bufferData, bufferID);
  loadSlicedColorVBO(bufferID, shaderBufferLocation);
}

operator genAndLoadSlicedColorAutoVBO(
  io Color bufferData[][],
  io Size bufferSize,
  io Integer bufferID,
  io Integer shaderBufferLocation
) {
  genSlicedColorAutoVBO(bufferData, bufferSize, bufferID);
  loadSlicedColorVBO(bufferID, shaderBufferLocation);
}