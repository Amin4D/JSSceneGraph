
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//


function Scalar sRGBtoLinear(Scalar c) {
  if (c <= 0.04045) {
    return c / 12.92;
  }
  else {
    return pow((c + 0.055) / 1.055, 2.4);
  }
}

function Scalar linearTosRGB(Scalar l) {
  if (l < 0.0) {
    return 0.0;
  }
  if (l > 1.0) {
    return 1.0;
  }
  if (l <= 0.0031308) {
    return l * 12.92;
  }
  else {
    return pow(1.055 * l, 1.0 / 2.4) - 0.055;
  }
}

function loadImageFromRawData(
  Data rawImageData,
  Size rawImageDataSize,
  String decoder,
  Boolean wantHDR,
  io Size imageWidth,
  io Size imageHeight,
  io Color imageHDR[],
  io RGBA imageLDR[]
) {
  if(rawImageDataSize == 0)
    return;
  
  var Boolean haveHDR;
  switch (decoder) {
    case'png':
      FabricPNGDecode(rawImageData, rawImageDataSize, imageWidth, imageHeight, imageLDR);
      haveHDR = false;
      break;
    case'tga':
      FabricTGADecode(rawImageData, rawImageDataSize, imageWidth, imageHeight, imageLDR);
      haveHDR = false;
      break;
    case'hdr':
      FabricHDRDecode(rawImageData, rawImageDataSize, imageWidth, imageHeight, imageHDR);
      haveHDR = true;
      break;
    case'exr':
      FabricHDRDecode(rawImageData, rawImageDataSize, imageWidth, imageHeight, imageHDR);
      haveHDR = true;
      break;
  }

  // [hi There's no == or != operators for boolean to boolean]
  var Size nbPixels = imageWidth * imageHeight;
  if (wantHDR && !haveHDR) {
    // Linearize the incoming data
    imageHDR.resize(nbPixels);

    for (Size i = 0; i < nbPixels; i++) {
      imageHDR[i].r = sRGBtoLinear(Scalar(imageLDR[i].r) / 255.0);
      imageHDR[i].g = sRGBtoLinear(Scalar(imageLDR[i].g) / 255.0);
      imageHDR[i].b = sRGBtoLinear(Scalar(imageLDR[i].b) / 255.0);
      imageHDR[i].a = Scalar(imageLDR[i].a) / 255.0;
    }
    imageLDR.resize(0);
  }
  else if (!wantHDR && haveHDR) {
    // Convert linear data to sRGB
    imageHDR.resize(nbPixels);

    for (Size i = 0; i < nbPixels; i++) {
      imageLDR[i].r = Byte(linearTosRGB(imageHDR[i].r) * 255.0);
      imageLDR[i].g = Byte(linearTosRGB(imageHDR[i].g) * 255.0);
      imageLDR[i].b = Byte(linearTosRGB(imageHDR[i].b) * 255.0);
      imageLDR[i].a = Byte(imageHDR[i].a * 255.0);
    }
    imageHDR.resize(0);
  }
}

operator loadImageHDR(
  io Data rawImageData,
  io Size rawImageDataSize,
  io String decoder,
  io Size imageWidth,
  io Size imageHeight,
  io Color imageHDR[],
) {
  var RGBA imageLDR[];

  var Size width, height;
  loadImageFromRawData(rawImageData, rawImageDataSize, decoder, true, width, height, imageHDR, imageLDR);
  imageWidth = width;
  imageHeight = height;
}

operator loadImageLDR(
  io Data rawImageData,
  io Size rawImageDataSize,
  io String decoder,
  io Size imageWidth,
  io Size imageHeight,
  io RGBA imageLDR[],
) {
  //  report("loadImageLDR:" + decoder);
  var Color imageHDR[];
  var Size width, height;
  loadImageFromRawData(rawImageData, rawImageDataSize, decoder, false, width, height, imageHDR, imageLDR);
  imageWidth = width;
  imageHeight = height;
}

function createTextureFromImage(
  Size width,
  Size height,
  Data pixels,
  Size nbPixels,
  Integer glFormat,
  Integer glSrcDataType,
  io Integer bufferID,
  io Integer textureUnit
) {
  //  report("createTextureFromImage  bufferID:"+bufferID + " textureUnit:"+textureUnit  );
  if (bufferID == 0 && nbPixels > 0) {
    glGenTextures(1, bufferID.data());
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
    //report("bufferID:"+bufferID);

    // glTexEnv( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE ); //set texture environment parameters

    //Generate the texture
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    if (nbPixels == (width * height))
      glTexImage2D(GL_TEXTURE_2D, 0, glFormat, width, height, 0, GL_RGBA, glSrcDataType, pixels);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  }
  else {
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
  }
}

operator createTextureFromImageLDR(
  io Size width,
  io Size height,
  io RGBA bitmap[],
  io Integer bufferID,
  io Integer textureUnit
) {
  //  report("createTextureFromImageLDR -> textureUnit:" + textureUnit + " bufferID:" + bufferID );
  createTextureFromImage(width, height, bitmap.data(), bitmap.size(), GL_RGBA, GL_UNSIGNED_BYTE, bufferID, textureUnit);
}

operator createTextureFromImageHDR(
  io Size width,
  io Size height,
  io Color bitmap[],
  io Integer bufferID,
  io Integer textureUnit
) {
  createTextureFromImage(width, height, bitmap.data(), bitmap.size(), GL_RGBA16F_ARB, GL_FLOAT, bufferID, textureUnit);
}

operator createSpriteTexture(
  io Integer res,
  io Integer bufferID,
  io Integer textureUnit
) {
  if (!bufferID && res > 0) {
    var RGBA texData[];
    texData.resize(res * res);

    var Size idx = 0;
    var Scalar dt = 2.0 / Scalar(res);
    var Scalar ty = - 1.0;
    for (var Integer y = 0; y < res; y++) {
      var Scalar tx = - 1.0;
      for (var Integer x = 0; x < res; x++) {
        var Scalar t = sqrt(tx * tx + ty * ty);
        if (t > 1.0) t = 1.0;
          t = 2.0 * t * t * t - 3.0 * t * t + 1.0;
        texData[idx].r = texData[idx].g = texData[idx].b = texData[idx].a = Byte(t * 255.0);
        idx++;
        tx += dt;
      }
      ty += dt;
    }

    glGenTextures(1, bufferID.data());
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
    glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, 1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, res, res, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData.data());
  }
  else {
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
  }
}

operator createErrorTexture(
  io Integer bufferID,
  io Integer textureUnit
) {
  if (!bufferID) {
    var RGBA texData[];
    texData.resize(1);
    texData[0].r = 1.0;
    texData[0].g = texData[0].b = texData[0].a = 0.0;
    glGenTextures(1, bufferID.data());
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData.data());
  }
  else {
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
  }
}