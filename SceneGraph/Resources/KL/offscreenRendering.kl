
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//
/*
operator prepareOffscreenRendering(
  io Integer width,
  io Integer height,
  io OGLRenderTarget renderTarget,
  io Color backgroundColor
) {
//  report("prepareOffscreenRendering");
  renderTarget.bind();
}

operator renderOffscreenToView(
  io Integer width,
  io Integer height,
  io Integer prevFBO,
  io Integer colorTextureID,
  io Integer program,
  io Integer prevProgramID,
  io Color backgroundColor
) {
  renderTarget.draw();
//  report("<<<renderOffscreenToView");
}
*/

operator renderTextureToView(
  io Integer textureUnit,
  io Integer program
) {
  // report(">>>renderTextureToView");

  if (!program) {
    OGLShaderSource pixelShader;
    OGLShaderSource fragmentShader;
    pixelShader.type = GL_VERTEX_SHADER;
    pixelShader.code = '\
      attribute vec4 a_position; \
      attribute vec4 a_texCoord; \
      void main() { \
        gl_TexCoord[0].st = a_texCoord.xy; \
        gl_Position = a_position; \
      }';

    fragmentShader.type = GL_FRAGMENT_SHADER;
    fragmentShader.code = '\
      uniform sampler2D u_rgbaImage; \
      void main() \
      { \
        gl_FragColor = texture2D( u_rgbaImage, gl_TexCoord[0].st ); \
      }';
    
    OGLShaderProgram shaderProgram('renderTextureToView');
    shaderProgram.shaderSources.push(pixelShader);
    shaderProgram.shaderSources.push(fragmentShader);
    shaderProgram.loadShader();
    if (!shaderProgram.programId) {
      report('Error in renderTextureToView');
      return;
    }
    program = shaderProgram.programId;
  }else{
    glUseProgram(program);
  }

  var String name = 'a_position';
  var Integer posLocation = glGetAttribLocation(program, name);
  name = 'a_texCoord';
  var Integer texLocation = glGetAttribLocation(program, name);
  name = 'u_rgbaImage';
  var Integer smpLocation = glGetUniformLocation(program, name);

  // Set the sampler
  glEnable(GL_TEXTURE_2D);
  glDisable(GL_DEPTH_TEST);
  glDisable(GL_CULL_FACE);

  glUniform1i(smpLocation, textureUnit);

  // Draw a quad in the upper left with debugging info
  var Vec3 p[4];
  p[0] = Vec3(-1.0, 1.0, 0.0);
  p[1] = Vec3(1.0, 1.0, 0.0);
  p[2] = Vec3(1.0, - 1.0, 0.0);
  p[3] = Vec3(-1.0, - 1.0, 0.0);
  var Vec2 t[4];
  t[0] = Vec2(0.0, 0.0);
  t[1] = Vec2(1.0, 0.0);
  t[2] = Vec2(1.0, 1.0);
  t[3] = Vec2(0.0, 1.0);
  var Integer idx[6];
  idx[0] = 0; idx[1] = 2; idx[2] = 1;
  idx[3] = 0; idx[4] = 3; idx[5] = 2;

  var Data NULL;

  var Size bufferID0;
  var Size bufferID1;
  var Size bufferID2;
  var Size bufferIDArray[];
  bufferIDArray.resize(1);
  glGenBuffers(1, bufferIDArray);
  bufferID0 = bufferIDArray[0];
  glGenBuffers(1, bufferIDArray);
  bufferID1 = bufferIDArray[0];
  glGenBuffers(1, bufferIDArray);
  bufferID2 = bufferIDArray[0];

  glBindBuffer(GL_ARRAY_BUFFER, bufferID0);
  glBufferData(GL_ARRAY_BUFFER, p.dataSize(), p.data(), GL_STATIC_DRAW);
  glEnableVertexAttribArray(posLocation);
  glVertexAttribPointer(posLocation, 3, GL_FLOAT, GL_FALSE, 0, NULL);

  glBindBuffer(GL_ARRAY_BUFFER, bufferID1);
  glBufferData(GL_ARRAY_BUFFER, t.dataSize(), t.data(), GL_STATIC_DRAW);
  glEnableVertexAttribArray(texLocation);
  glVertexAttribPointer(texLocation, 2, GL_FLOAT, GL_FALSE, 0, NULL);

  glBindBuffer(GL_ARRAY_BUFFER, bufferID2);
  glBufferData(GL_ARRAY_BUFFER, idx.dataSize(), idx.data(), GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bufferID2);
  glDrawElements(GL_TRIANGLES, idx.size(), GL_UNSIGNED_INT, NULL);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

  glEnable(GL_DEPTH_TEST);
  glEnable(GL_CULL_FACE);
  // report("<<<renderTextureToView");
}