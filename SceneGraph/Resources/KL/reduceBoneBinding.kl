
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

function bubbleSortWeights(
  io Scalar weights[],
  io Integer indices[],
  in Integer start,
  in Integer end
) {
  if (start != end - 1) {
    for (Integer i = start; i < end; i++) {
      for (Integer j = i + 1; j < end; j++) {
        if (weights[i] < weights[j]) {
          // swap them!
          var Scalar tmpScalar = weights[i];
          var Integer tmpIndex = indices[i];
          weights[i] = weights[j];
          indices[i] = indices[j];
          weights[j] = tmpScalar;
          indices[j] = tmpIndex;
        }
      }
    }
  }
}

operator reduceBoneBinding(
  io Integer boneCountArray[],
  io Integer boneIndicesArray[],
  io Scalar boneWeightsArray[],
  io Vec4 boneIndices[],
  io Vec4 boneWeights[]
) {
  boneIndices.resize(boneCountArray.size());
  boneWeights.resize(boneCountArray.size());
  var Integer offset = 0;
  for (var Integer i = 0; i < boneCountArray.size(); i++) {
    boneWeights[i] = Vec4(0.0, 0.0, 0.0, 0.0);

    if (boneCountArray[i] > 0) {
      bubbleSortWeights(boneWeightsArray, boneIndicesArray, offset, offset + boneCountArray[i]);

      var Scalar sum = 0.0;
      var Integer count = boneCountArray[i];
      if (count > 4) {
        count =4;
      }
      for (var Integer j = 0; j < count; j++) {
        sum += boneWeightsArray[offset + j];
      }

      boneIndices[i].x = boneIndicesArray[offset];
      boneWeights[i].x = boneWeightsArray[offset] / sum;

      if (count > 1) {
        boneIndices[i].y = boneIndicesArray[offset + 1];
        boneWeights[i].y = boneWeightsArray[offset + 1] / sum;
      }
      if (count > 2) {
        boneIndices[i].z = boneIndicesArray[offset + 2];
        boneWeights[i].z = boneWeightsArray[offset + 2] / sum;
      }
      if (count > 3) {
        boneIndices[i].t = boneIndicesArray[offset + 3];
        boneWeights[i].t = boneWeightsArray[offset + 3] / sum;
      }

      offset += boneCountArray[i];
    }
  }

  //report("reduced bone binding");
}