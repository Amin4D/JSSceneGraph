
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//


operator solveSpine(
  io Xfo pose[],
  io Bone bones[],

  io Integer end,
  io Integer vertebraIndices[],
  io Scalar uvalues[],
  io Scalar startTangent,
  io Scalar endTangent,
  io Boolean globalStart,

  io Xfo startlocalXfo,
  io Xfo endlocalXfo
) {
  if (vertebraIndices.size() != (uvalues.size() - 1)) {
    // TODO: throw an assert once we are able to do that.
    report('Error: vertebraIndices count does not match uvalues count');
    return;
  }

  Xfo baseXfo = startlocalXfo;
  Xfo tipXfo = endlocalXfo;
  if(globalStart){
    tipXfo = baseXfo.project(tipXfo);
  }else if(bones[vertebraIndices[0]].parent != -1){
    baseXfo = pose[bones[vertebraIndices[0]].parent].project(baseXfo);
    tipXfo = pose[bones[vertebraIndices[0]].parent].project(tipXfo);
  }

  var Vec3 p1 = baseXfo.tr;
  var Vec3 p4 = tipXfo.tr;

  Scalar spineLength = p1.dist(p4);

  var Vec3 p2 = baseXfo.transform(Vec3(spineLength * startTangent, 0.0, 0.0));
  var Vec3 p3 = tipXfo.transform(Vec3(-spineLength * endTangent, 0.0, 0.0));

  Vec3 curvePoints[];
  curvePoints.resize(vertebraIndices.size() + 1);
  curvePoints[0] = p1;
  curvePoints[vertebraIndices.size()] = p4;
  for (var Integer i = 1; i < vertebraIndices.size(); i++) {
    Scalar u = uvalues[i];

    Scalar a = pow(1.0 - u, 3.0);
    Scalar b = 3.0 * u * pow(1.0 - u, 2.0);
    Scalar c = 3.0 * pow(u, 2.0) * (1.0 - u);
    Scalar d = pow(u, 3.0);

    curvePoints[i] = a * p1 + b * p2 + c * p3 + d * p4;
  }

  for (var Integer i = 0; i < vertebraIndices.size(); i++) {
    // orient them
    Xfo vertebreXfo = pose[vertebraIndices[i]];
    vertebreXfo.tr = curvePoints[i];
    vertebreXfo.ori = slerp(baseXfo.ori, tipXfo.ori, (uvalues[i] + uvalues[i + 1]) * 0.5);

    var Vec3 alignment = curvePoints[i + 1] - curvePoints[i];
    Scalar vertebreLength = alignment.norm();
    alignment *= 1.0 / vertebreLength;
    var Vec3 xAxis = vertebreXfo.ori.getXaxis();
    vertebreXfo.ori = makeQuatFrom2Vectors(xAxis, alignment).unit() * vertebreXfo.ori;
    vertebreXfo.sc.x = vertebreLength / bones[vertebraIndices[i]].length;

    pose[vertebraIndices[i]] = vertebreXfo;
  }

  pose[end].ori = tipXfo.ori;
  pose[end].tr = curvePoints[vertebraIndices.size()];
}

operator solveInvSpine(
  io Xfo srcpose[],
  io Bone srcbones[],
  io Bone tgtbones[],

  io Integer srcstart,
  io Integer srcend,
  io Integer tgtstart,
  io Integer tgtend,
  io Boolean globalStart,

  io Xfo startlocalXfo,
  io Xfo endlocalXfo
) {
  var Bone srcStartBone = srcbones[srcstart];
  var Bone srcEndBone = srcbones[srcend];
  var Bone tgtStartBone = tgtbones[tgtstart];
  var Bone tgtEndBone = tgtbones[tgtend];
  
  // basically we just copy the transforms out!
  startlocalXfo = srcpose[srcstart];
  endlocalXfo = srcpose[srcend];
  if(globalStart){
    endlocalXfo = startlocalXfo.invProject(endlocalXfo);
  }
  else if(tgtStartBone.parent != -1){
    startlocalXfo = srcpose[srcStartBone.parent].invProject(srcpose[srcstart]);
    endlocalXfo = srcpose[srcStartBone.parent].invProject(srcpose[srcend]);
  }

  // apply the differentiating offset between the two spines
  var Xfo srcoffset = srcStartBone.referencePose.invProject(srcEndBone.referencePose);
  var Xfo tgtoffset = tgtStartBone.referencePose.invProject(tgtEndBone.referencePose);
  var Xfo offset = srcoffset.invProject(tgtoffset);
  endlocalXfo = endlocalXfo.project(offset);
}