
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



function OGLRenderTarget.genTextures() {
//  report("OGLTexture2D.genTextures width:" + self.width + " height:" + self.height);

  Integer i, maxColorBuffers;
//  glGetIntegerv(GL_MAX_COLOR_ATTACHMENTS, maxColorBuffers);
//  self.numColorBuffers = 0;
//  for(i=0; i<self.textures.size(); i++){
//    if(self.textures[i].type == COLOR_BUFFER)
//      self.numColorBuffers++;
//  }
  
  if(maxColorBuffers < self.numColorBuffers){
    report("Your OpenGL implementation supports only " + maxColorBuffers + " but " + self.numColorBuffers + " are needed");
    return;
  }
  //Create Frame Buffer Object
  Size fbos[];
  fbos.resize(1);
  glGenFramebuffers(1, fbos);
  self.fbo = fbos[0];
  
  glBindFramebuffer(GL_FRAMEBUFFER, self.fbo);
  
  self.numColorBuffers = 0;
  Size textureIDs[];
  textureIDs.resize(1);
  
  for(i=0; i<self.textures.size(); i++){
    if(self.textures[i].texture.bufferID!=0){
      report("Error: texture is already generated");
      break;
    }
    switch(self.textures[i].type){
      case 1://self.DEPTH_BUFFER:
        {
          if(self.depthBuffer != -1){
            report( "Creating 2 or more depth buffers is not possible!");
            break;
          }
          if(self.hasDepthBufferTexture){
            report( "A depth buffer texture has already been created, can not create another depth texture");
            break;
          }
          if(self.textures[i].texture.glInternalFormat != GL_DEPTH_COMPONENT){
            report( "A Depth Buffer must impliment a GL_DEPTH_COMPONENT internal format.");
            break;
          }
          
          self.textures[i].texture.genTexture(self.width, self.height);
          if(self.textures[i].texture.bufferID==0){
            report("Error generating texture");
            break;
          }
          
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, self.textures[i].texture.bufferID, 0);
          
          self.depthBuffer = i;
          self.hasDepthBufferTexture = true;
        }
        break;
      case 2://self.COLOR_BUFFER:
        {
          self.textures[i].texture.genTexture(self.width, self.height);
          if(self.textures[i].texture.bufferID==0){
            report("Error generating texture");
            continue;
          }
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0+self.numColorBuffers, GL_TEXTURE_2D, self.textures[i].texture.bufferID, 0);
          
          self.numColorBuffers++;
        }
        break;
    }
  }

  /*
  //Depth buffer only
  if(self.numColorBuffers <= 0){
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
  }
  */
  
  var Integer status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
  if (status != GL_FRAMEBUFFER_COMPLETE){
    switch(status){
      case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        report( "ERROR: incomplete attachment");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        report( "ERROR: missing attachment");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:
        report( "ERROR: missing draw buffer");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:
        report( "ERROR: missing read buffer");
        break;
      case GL_FRAMEBUFFER_UNSUPPORTED:
        report( "ERROR: rendertarget not supported");
        break;
      default:
        report( "ERROR: unkown error");
        break;
    }
  }
}


function OGLRenderTarget.prebind(
  Integer currWidth,
  Integer currHeight
) {
//  report("prebind:"+currWidth + ","+currHeight );
  if(self.fbo == 0){
    self.width = currWidth;
    self.height = currHeight;
  }
  else {
    if (self.width != currWidth || self.height != currHeight) {
      // If this FBO is a full screen FBO, then we check to see
      // if the viewport dimensions have changed, and rebuild
      // the textures if they have.
    
      Size numTextures = (self.hasDepthBufferTexture ? 1 : 0) + self.numColorBuffers;
      Size bufferIDs[];
      bufferIDs.resize(numTextures);
      
      for(Integer i=0; i<self.textures.size(); i++){
        bufferIDs[i] = self.textures[i].texture.bufferID;
        self.textures[i].texture.bufferID = 0;
      }
      // Textures need to be deleted first.;
      glDeleteTextures(numTextures, bufferIDs);

      bufferIDs.resize(1);
      bufferIDs[0] = self.fbo;
      glDeleteFramebuffers(1, bufferIDs);

      self.fbo = 0;
      self.depthBuffer = -1;
      self.hasDepthBufferTexture = false;
      self.width = currWidth;
      self.height = currHeight;
    }
  }
}

function OGLRenderTarget.bind() {
//  report("OGLRenderTarget.bind()");
  
  Integer prevFbos[];
  prevFbos.resize(1);
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, prevFbos);
  self.prevFbo = prevFbos[0];
  
  if(self.fbo==0){
    self.genTextures();
  }
  
  glBindFramebuffer(GL_FRAMEBUFFER, self.fbo);
  Size attribs = GL_VIEWPORT_BIT | GL_TEXTURE_BIT;
  Size options = 0;
  if(self.clearDepth){
    attribs = attribs | GL_DEPTH_BUFFER_BIT;
    options = options | GL_DEPTH_BUFFER_BIT;
  }
  if(self.numColorBuffers > 0 && self.clearColorFlag){
    attribs = attribs | GL_COLOR_BUFFER_BIT;
    options = options | GL_COLOR_BUFFER_BIT;
  }
  
  glPushAttrib(attribs);
  if(attribs&GL_COLOR_BUFFER_BIT){
    glClearColor(self.clearColor.r, self.clearColor.g, self.clearColor.b, 1.0);
  }
  glViewport(0,0, self.width, self.height);
  glClear(options);
  
  // Note: I'm not sure if I need to do this every frame
  //Depth buffer only
  if(self.numColorBuffers <= 0){
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
  }
  
  for(Integer i=0; i<self.enableOptions.size(); i++){
    glEnable(self.enableOptions[i]);
  }
  glCullFace(self.cullFace);
}

function OGLRenderTarget.unbind() {
//  report("OGLRenderTarget.unbind() prevFbo:" + self.prevFbo);
  
  if(self.fbo==0){
    report("Error: FBO not generated");
  }
  // restore the OpenGL state
  glPopAttrib();
  glBindFramebuffer(GL_FRAMEBUFFER, self.prevFbo);
}


