<?xml version="1.0" encoding="UTF-8"?>
<shader>
	<name>PhongBumpReflectSkinningMaterial</name>
	
	<uniforms>
		<uniform name="u_lightPosition" constant="lightPosition" owner="light"/>
		<uniform name="u_lightType" constant="lightType" owner="light"/>
		<uniform name="u_lightDir" constant="lightDir" owner="light"/>
		<uniform name="u_lightColor" constant="lightColor" owner="light"/>
		<uniform name="u_lightCosCutoff" constant="lightCosCutoff" owner="light"/>

		<uniform name="u_materialAmbientColor" constant="ambientColor"/>
		<uniform name="u_materialShininess" constant="shininess" defaultValue="20.7"/>
		<uniform name="u_materialBumpStrength" constant="bumpiness" defaultValue="1.0"/>
		
		<uniform name="u_samplerDiffuseMap" constant="diffuseTexture" owner="texture"/>
		<uniform name="u_samplerSpecularMap" constant="specularTexture" owner="texture"/>
		<uniform name="u_samplerNormalMap" constant="normalTexture" owner="texture"/>
		
		<uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" owner="instance"/>
		<uniform name="u_modelViewMatrix" constant="modelViewMatrix" owner="instance"/>
		<uniform name="u_normalMatrix" constant="normalMatrix" owner="instance"/>
		
		<uniform name="u_boneMatrices" constant="boneMatrices" owner="characterInstance"/>
	</uniforms>
	
	<attributes>
		<attribute name="a_position" binding="positions"/>
		<attribute name="a_texCoord" binding="uvs0"/>
		<attribute name="a_normal" binding="normals"/>
		<attribute name="a_tangent" binding="tangents"/>
		
		<attribute name="a_weight" binding="boneWeights"/>
		<attribute name="a_index" binding="boneIds"/>
	</attributes>
	
	<lights>
		<light type="Light" binding="light"/>
	</lights>
	
	<textures>
		<texture binding="diffuseTexture"/>
		<texture binding="specularTexture"/>
		<texture binding="normalTexture"/>
	</textures>
	
	<preprocessordirectives>
		<preprocessordirective name="NUM_BONES" binding="numBones"/>
	</preprocessordirectives>
	
	<vertexshader>
		<source>
			<![CDATA[
			uniform mat4 u_modelViewProjectionMatrix;
			uniform mat4 u_modelViewMatrix;
			uniform mat3 u_normalMatrix;
			uniform vec4 u_lightPosition;
			
			// This is an array of all the bones in a skeleton.
			uniform mat4 u_boneMatrices[NUM_BONES];
			
			attribute vec4 a_position;
			attribute vec4 a_texCoord;
			attribute vec3 a_normal;
			attribute vec4 a_tangent;
			
			attribute mat3 a_weight;
			attribute mat3 a_index;
			
			varying vec3 normal;
			varying vec3 tangent;
			varying vec3 binormal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			
			#define SKIN_POSITIONS_NORMALS_AND_TANGENTS
			
			]]>
		</source>
		<include file="skinning.txt"/>
		<source>
			<![CDATA[
			
			void main()
			{
				gl_TexCoord[0].xy = a_texCoord.xy;
				skinPositionsNormalsAndTangents();
			}
			
			
			]]>
		</source>
	</vertexshader>
	
	<fragmentshader>
		<source>
			<![CDATA[
			uniform int u_lightType;
			uniform vec3 u_lightDir;
			uniform vec4 u_lightColor;
			uniform float u_lightCosCutoff;
			
			uniform float u_materialShininess;
			uniform vec4 u_materialAmbientColor;
			uniform float u_materialBumpStrength;
			
			uniform sampler2D u_samplerDiffuseMap;
			uniform sampler2D u_samplerSpecularMap;
			uniform sampler2D u_samplerNormalMap;
			
			varying vec3 normal;
			varying vec3 tangent;
			varying vec3 binormal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			
			
			]]>
			</source>
			<include file="lighting.txt"/>
			<source>
			<![CDATA[
			
			void main(){
				vec3 Ln = normalize(lightDir);
				vec3 Vn = normalize(viewDir);
				vec3 Nn = apply_normal_map(	normalize(normal),
									normalize(tangent),
									normalize(binormal),
									u_materialBumpStrength,
									u_samplerNormalMap );
									
				float lightFactor = 1.0;
				gl_FragColor = phong_shading(	Nn, 
												Ln, 
												Vn, 
												u_lightType,
												u_lightDir,
												lightFactor,
												u_lightCosCutoff,
												u_lightColor,
												texture2D( u_samplerDiffuseMap, gl_TexCoord[0].st ), 
												texture2D( u_samplerSpecularMap, gl_TexCoord[0].st ),
												u_materialShininess,
												u_materialAmbientColor );
			}
			]]>
		</source>
	</fragmentshader>
</shader>
